print(k)
}
for(k in 1:(length(attackSeq)-1)){
efBefore<-c(efBefore,findEfficiency(gt1,at[1:k]))
efgr<-c(efgr,findEfficiency(gt2,at))
efAfter<-c(efAfter,findEfficiency(gt3,at))
print(k)
}
###################################plot result###########################
df<-cbind.data.frame(attackSeq,efAfter,efBefore,efgr)
names(df)<-c("numberOfAttacks","efAfter","efBefore","efgr")
efPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = efAfter, colour="After Adding Links")) +
geom_line(aes(y = efBefore, colour = "Before Adding Links")) +
geom_line(aes(y = efgr, colour = "Random graph"))+
ylab(label="Efficiency After Failure") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("blue", "red","green"))+
scale_x_continuous(breaks=attackSeq)
st1<-paste0(type,"_",attackMethod,"_",n0,"_",maxNumberOfAttacks,"_",Linklimit,".png")
png(st1, width = 800)
print(efPlot)
dev.off()
efAfter<-vector()
efBefore<-vector()
efgr<-vector()
set.seed(123)
gr<-erdos.renyi.game(n=n0,p.or.m = (ecount(g0))+Linklimit,type = "gnm")
V(gr)$name <-V(gr)
##############################attack graphs
gt1<-g0
gt2<-gr
gt3<-g
set.seed(123)
###########attack original
at0<-findFailure(gt1,0)
efBefore<-c(efBefore,findEfficiency(gt1,at0))
##################attack updated
set.seed(123)
atr<-findFailure(gt2,0)
efgr<-c(efgr,findEfficiency(gt2,atr))
####################attack random
set.seed(123)
at<-findFailure(gt3,0)
efAfter<-c(efAfter,findEfficiency(gt3,at))
at<-c()
for(k in 2:length(attackSeq)){
set.seed(123)
at<-c(at,findFailure(gt1,1))
gt1<-delete.vertices(gt1,tail(at,1))
print(k)
}
for(k in 1:(length(attackSeq)-1)){
efBefore<-c(efBefore,findEfficiency(gt1,at[1:k]))
efgr<-c(efgr,findEfficiency(gt2,at[1:k]))
efAfter<-c(efAfter,findEfficiency(gt3,at[1:k]))
print(k)
}
###################################plot result###########################
df<-cbind.data.frame(attackSeq,efAfter,efBefore,efgr)
names(df)<-c("numberOfAttacks","efAfter","efBefore","efgr")
efPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = efAfter, colour="After Adding Links")) +
geom_line(aes(y = efBefore, colour = "Before Adding Links")) +
geom_line(aes(y = efgr, colour = "Random graph"))+
ylab(label="Efficiency After Failure") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("blue", "red","green"))+
scale_x_continuous(breaks=attackSeq)
st1<-paste0(type,"_",attackMethod,"_",n0,"_",maxNumberOfAttacks,"_",Linklimit,".png")
png(st1, width = 800)
print(efPlot)
dev.off()
at
at[1:4]
############intialize vectors
efAfter<-vector()
efBefore<-vector()
efgr<-vector()
#######create random graph of same size as added
set.seed(123)
gr<-erdos.renyi.game(n=n0,p.or.m = (ecount(g0))+Linklimit,type = "gnm")
V(gr)$name <-V(gr)
##############################attack graphs
gt1<-g0
gt2<-gr
gt3<-g
set.seed(123)
###########attack original
at0<-findFailure(gt1,0)
efBefore<-c(efBefore,findEfficiency(gt1,at0))
##################attack updated
set.seed(123)
atr<-findFailure(gt2,0)
efgr<-c(efgr,findEfficiency(gt2,atr))
####################attack random
set.seed(123)
at<-findFailure(gt3,0)
efAfter<-c(efAfter,findEfficiency(gt3,at))
at<-c()
for(k in 2:length(attackSeq)){
set.seed(123)
at<-c(at,findFailure(gt1,1))
gt1<-delete.vertices(gt1,tail(at,1))
print(k)
}
for(k in 1:(length(attackSeq)-1)){
efBefore<-c(efBefore,findEfficiency(g0,at[1:k]))
efgr<-c(efgr,findEfficiency(gr,at[1:k]))
efAfter<-c(efAfter,findEfficiency(g,at[1:k]))
print(k)
}
###################################plot result###########################
df<-cbind.data.frame(attackSeq,efAfter,efBefore,efgr)
names(df)<-c("numberOfAttacks","efAfter","efBefore","efgr")
efPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = efAfter, colour="After Adding Links")) +
geom_line(aes(y = efBefore, colour = "Before Adding Links")) +
geom_line(aes(y = efgr, colour = "Random graph"))+
ylab(label="Efficiency After Failure") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("blue", "red","green"))+
scale_x_continuous(breaks=attackSeq)
st1<-paste0(type,"_",attackMethod,"_",n0,"_",maxNumberOfAttacks,"_",Linklimit,".png")
png(st1, width = 800)
print(efPlot)
dev.off()
df
write.csv(df,file="df.csv")
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/CleanResults/CompareRandomFailureWithOriginalAndRandom/AttackVsEfficiency_DegreeAttack.R')
write.csv(df,file="df.csv")
write.csv(df,file="df.csv")
write.csv(df,file="df.csv")
#######create random graph of same size as added
set.seed(123)
gr<-erdos.renyi.game(n=n0,p.or.m = (ecount(g0))+Linklimit,type = "gnm")
V(gr)$name <-V(gr)
############intialize vectors
sizeAfter<-vector()
sizeBefore<-vector()
sizegr<-vector()
##############################attack graphs
gt1<-g0
gt2<-gr
gt3<-g
set.seed(123)
###########attack original
at0<-findFailure(gt1,0)
sizeBefore<-c(sizeBefore,findLCC(gt1,at0))
##################attack updated
set.seed(123)
atr<-findFailure(gt2,0)
sizegr<-c(sizegr,findLCC(gt2,atr))
####################attack random
set.seed(123)
at<-findFailure(gt3,0)
sizeAfter<-c(sizeAfter,findLCC(gt3,at))
at<-c()
for(k in 2:length(attackSeq)){
set.seed(123)
at<-c(at,findFailure(gt1,1))
gt1<-delete.vertices(gt1,tail(at,1))
print(k)
}
for(k in 1:(length(attackSeq)-1)){
sizeBefore<-c(sizeBefore,findLCC(g0,at[1:k]))
sizegr<-c(sizegr,findLCC(gr,at[1:k]))
sizeAfter<-c(sizeAfter,findLCC(g,at[1:k]))
print(k)
}
###################################plot result###########################
df<-cbind.data.frame(attackSeq,sizeAfter,sizeBefore,sizegr)
names(df)<-c("numberOfAttacks","sizeAfter","sizeBefore","sizegr")
sizePlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = sizeAfter, colour="After Adding Links")) +
geom_line(aes(y = sizeBefore, colour = "Before Adding Links")) +
geom_line(aes(y = sizegr, colour = "Random graph"))+
ylab(label="Size of Largest Connected Component") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("blue", "red","green"))+
scale_x_continuous(breaks=attackSeq)
st1<-paste0(type,"_",attackMethod,"_",n0,"_",maxNumberOfAttacks,"_",Linklimit,".png")
png(st1, width = 800)
print(sizePlot)
dev.off()
type<-"FailureVsLCC_"
set.seed(123)
gr<-erdos.renyi.game(n=n0,p.or.m = (ecount(g0))+Linklimit,type = "gnm")
V(gr)$name <-V(gr)
############intialize vectors
sizeAfter<-vector()
sizeBefore<-vector()
sizegr<-vector()
##############################attack graphs
gt1<-g0
gt2<-gr
gt3<-g
set.seed(123)
###########attack original
at0<-findFailure(gt1,0)
sizeBefore<-c(sizeBefore,findLCC(gt1,at0))
##################attack updated
set.seed(123)
atr<-findFailure(gt2,0)
sizegr<-c(sizegr,findLCC(gt2,atr))
####################attack random
set.seed(123)
at<-findFailure(gt3,0)
sizeAfter<-c(sizeAfter,findLCC(gt3,at))
at<-c()
for(k in 2:length(attackSeq)){
set.seed(123)
at<-c(at,findFailure(gt1,1))
gt1<-delete.vertices(gt1,tail(at,1))
print(k)
}
for(k in 1:(length(attackSeq)-1)){
sizeBefore<-c(sizeBefore,findLCC(g0,at[1:k]))
sizegr<-c(sizegr,findLCC(gr,at[1:k]))
sizeAfter<-c(sizeAfter,findLCC(g,at[1:k]))
print(k)
}
###################################plot result###########################
df<-cbind.data.frame(attackSeq,sizeAfter,sizeBefore,sizegr)
names(df)<-c("numberOfAttacks","sizeAfter","sizeBefore","sizegr")
sizePlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = sizeAfter, colour="After Adding Links")) +
geom_line(aes(y = sizeBefore, colour = "Before Adding Links")) +
geom_line(aes(y = sizegr, colour = "Random graph"))+
ylab(label="Size of Largest Connected Component") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("blue", "red","green"))+
scale_x_continuous(breaks=attackSeq)
st1<-paste0(type,"_",attackMethod,"_",n0,"_",maxNumberOfAttacks,"_",Linklimit,".png")
png(st1, width = 800)
print(sizePlot)
dev.off()
sizePlot
df
findLCC(g,at)
findLCC<-function(g){
cl<-clusters(g)
max(cl$csize )
}
#######create random graph of same size as added
set.seed(123)
gr<-erdos.renyi.game(n=n0,p.or.m = (ecount(g0))+Linklimit,type = "gnm")
V(gr)$name <-V(gr)
############intialize vectors
sizeAfter<-vector()
sizeBefore<-vector()
sizegr<-vector()
##############################attack graphs
gt1<-g0
gt2<-gr
gt3<-g
set.seed(123)
###########attack original
at0<-findFailure(gt1,0)
sizeBefore<-c(sizeBefore,findLCC(gt1,at0))
##################attack updated
set.seed(123)
atr<-findFailure(gt2,0)
sizegr<-c(sizegr,findLCC(gt2,atr))
####################attack random
set.seed(123)
at<-findFailure(gt3,0)
sizeAfter<-c(sizeAfter,findLCC(gt3,at))
at<-c()
for(k in 2:length(attackSeq)){
set.seed(123)
at<-c(at,findFailure(gt1,1))
gt1<-delete.vertices(gt1,tail(at,1))
print(k)
}
for(k in 1:(length(attackSeq)-1)){
sizeBefore<-c(sizeBefore,findLCC(g0,at[1:k]))
sizegr<-c(sizegr,findLCC(gr,at[1:k]))
sizeAfter<-c(sizeAfter,findLCC(g,at[1:k]))
print(k)
}
###################################plot result###########################
df<-cbind.data.frame(attackSeq,sizeAfter,sizeBefore,sizegr)
names(df)<-c("numberOfAttacks","sizeAfter","sizeBefore","sizegr")
sizePlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = sizeAfter, colour="After Adding Links")) +
geom_line(aes(y = sizeBefore, colour = "Before Adding Links")) +
geom_line(aes(y = sizegr, colour = "Random graph"))+
ylab(label="Size of Largest Connected Component") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("blue", "red","green"))+
scale_x_continuous(breaks=attackSeq)
st1<-paste0(type,"_",attackMethod,"_",n0,"_",maxNumberOfAttacks,"_",Linklimit,".png")
png(st1, width = 800)
print(sizePlot)
dev.off()
findLCC(g,at)
findLCC(graphAfterAttackWith(g,at[1:k]))
k
#######create random graph of same size as added
set.seed(123)
gr<-erdos.renyi.game(n=n0,p.or.m = (ecount(g0))+Linklimit,type = "gnm")
V(gr)$name <-V(gr)
############intialize vectors
sizeAfter<-vector()
sizeBefore<-vector()
sizegr<-vector()
##############################attack graphs
gt1<-g0
gt2<-gr
gt3<-g
set.seed(123)
###########attack original
at0<-findFailure(gt1,0)
sizeBefore<-c(sizeBefore,findLCC(graphAfterAttackWith(gt1,at0)))
##################attack updated
set.seed(123)
atr<-findFailure(gt2,0)
sizegr<-c(sizegr,findLCC(graphAfterAttackWith(gt2,atr)))
####################attack random
set.seed(123)
at<-findFailure(gt3,0)
sizeAfter<-c(sizeAfter,findLCC(graphAfterAttackWith(gt3,at)))
at<-c()
for(k in 2:length(attackSeq)){
set.seed(123)
at<-c(at,findFailure(gt1,1))
gt1<-delete.vertices(gt1,tail(at,1))
print(k)
}
for(k in 1:(length(attackSeq)-1)){
sizeBefore<-c(sizeBefore,findLCC(graphAfterAttackWith(g0,at[1:k])))
sizegr<-c(sizegr,findLCC(graphAfterAttackWith(gr,at[1:k])))
sizeAfter<-c(sizeAfter,findLCC(graphAfterAttackWith(g,at[1:k])))
print(k)
}
###################################plot result###########################
df<-cbind.data.frame(attackSeq,sizeAfter,sizeBefore,sizegr)
names(df)<-c("numberOfAttacks","sizeAfter","sizeBefore","sizegr")
sizePlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = sizeAfter, colour="After Adding Links")) +
geom_line(aes(y = sizeBefore, colour = "Before Adding Links")) +
geom_line(aes(y = sizegr, colour = "Random graph"))+
ylab(label="Size of Largest Connected Component") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("blue", "red","green"))+
scale_x_continuous(breaks=attackSeq)
st1<-paste0(type,"_",attackMethod,"_",n0,"_",maxNumberOfAttacks,"_",Linklimit,".png")
png(st1, width = 800)
print(sizePlot)
dev.off()
#######create random graph of same size as added
set.seed(123)
gr<-erdos.renyi.game(n=n0,p.or.m = (ecount(g0))+Linklimit,type = "gnm")
V(gr)$name <-V(gr)
############intialize vectors
sizeAfter<-vector()
sizeBefore<-vector()
sizegr<-vector()
##############################attack graphs
gt1<-g0
gt2<-gr
gt3<-g
set.seed(123)
###########attack original
at0<-findFailure(gt1,0)
sizeBefore<-c(sizeBefore,findLCC(graphAfterAttackWith(gt1,at0)))
##################attack updated
set.seed(123)
atr<-findFailure(gt2,0)
sizegr<-c(sizegr,findLCC(graphAfterAttackWith(gt2,atr)))
####################attack random
set.seed(123)
at<-findFailure(gt3,0)
sizeAfter<-c(sizeAfter,findLCC(graphAfterAttackWith(gt3,at)))
at<-c()
for(k in 2:length(attackSeq)){
set.seed(123)
at<-c(at,findFailure(gt1,1))
gt1<-delete.vertices(gt1,tail(at,1))
print(k)
}
for(k in 1:(length(attackSeq)-1)){
sizeBefore<-c(sizeBefore,findLCC(graphAfterAttackWith(g0,at[1:k])))
sizegr<-c(sizegr,findLCC(graphAfterAttackWith(gr,at[1:k])))
sizeAfter<-c(sizeAfter,findLCC(graphAfterAttackWith(g,at[1:k])))
print(k)
}
###################################plot result###########################
df<-cbind.data.frame(attackSeq,sizeAfter,sizeBefore,sizegr)
names(df)<-c("numberOfAttacks","sizeAfter","sizeBefore","sizegr")
sizePlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = sizeAfter, colour="After Adding Links")) +
geom_line(aes(y = sizeBefore, colour = "Before Adding Links")) +
geom_line(aes(y = sizegr, colour = "Random graph"))+
ylab(label="Size of Largest Connected Component") +
xlab("Number of Failures")+
scale_colour_manual(values=c("blue", "red","green"))+
scale_x_continuous(breaks=attackSeq)
st1<-paste0(type,"_",attackMethod,"_",n0,"_",maxNumberOfAttacks,"_",Linklimit,".png")
png(st1, width = 800)
print(sizePlot)
dev.off()
write.csv(df,file="dff.csv")
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/CleanResults/CompareRandomFailureWithOriginalAndRandom/AttackVsLCC_BetweennessAttack.R')
write.csv(df,file="df.csv")
type<-"FailureVsEfficiency_"
attackMethod<-"Betweenness"
Linklimit<-20
############intialize vectors
efAfter<-vector()
efBefore<-vector()
efgr<-vector()
#######create random graph of same size as added
set.seed(123)
gr<-erdos.renyi.game(n=n0,p.or.m = (ecount(g0))+Linklimit,type = "gnm")
V(gr)$name <-V(gr)
##############################attack graphs
gt1<-g0
gt2<-gr
gt3<-g
set.seed(123)
###########attack original
at0<-findFailure(gt1,0)
efBefore<-c(efBefore,findEfficiency(gt1,at0))
##################attack updated
set.seed(123)
atr<-findFailure(gt2,0)
efgr<-c(efgr,findEfficiency(gt2,atr))
####################attack random
set.seed(123)
at<-findFailure(gt3,0)
efAfter<-c(efAfter,findEfficiency(gt3,at))
at<-c()
for(k in 2:length(attackSeq)){
set.seed(123)
at<-c(at,findFailure(gt1,1))
gt1<-delete.vertices(gt1,tail(at,1))
print(k)
}
for(k in 1:(length(attackSeq)-1)){
efBefore<-c(efBefore,findEfficiency(g0,at[1:k]))
efgr<-c(efgr,findEfficiency(gr,at[1:k]))
efAfter<-c(efAfter,findEfficiency(g,at[1:k]))
print(k)
}
###################################plot result###########################
df<-cbind.data.frame(attackSeq,efAfter,efBefore,efgr)
names(df)<-c("numberOfAttacks","efAfter","efBefore","efgr")
efPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = efAfter, colour="After Adding Links")) +
geom_line(aes(y = efBefore, colour = "Before Adding Links")) +
geom_line(aes(y = efgr, colour = "Random graph"))+
ylab(label="Efficiency After Failure") +
xlab("Number of Failures")+
scale_colour_manual(values=c("blue", "red","green"))+
scale_x_continuous(breaks=attackSeq)
st1<-paste0(type,"_",attackMethod,"_",n0,"_",maxNumberOfAttacks,"_",Linklimit,".png")
png(st1, width = 800)
print(efPlot)
dev.off()
type<-"FailureVsEfficiency_"
attackMethod<-"Degree"
Linklimit<-20
efgr<-c(0.20009077,0.195041783,0.186008171,0.182803564
,0.156526528
,0.14848323
,0.141701
,0.13829247
,0.13006564
,0.121792072
,0.11851832
)
efBefore<-c(0.216713182
,0.205858736
,0.202004049
,0.19433927
,0.190495435
,0.186407813
,0.186407813
,0.186205793
,0.182570522
,0.178815431
,0.175742742
)
efAfter<-c(0.244627349
,0.239222346
,0.235051431
,0.228894945
,0.22494537
,0.220672001
,0.215555556
,0.207391454
,0.203545134
,0.198646064
,0.195134432
)
###################################plot result###########################
df<-cbind.data.frame(attackSeq,efAfter,efBefore,efgr)
names(df)<-c("numberOfAttacks","efAfter","efBefore","efgr")
efPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = efAfter, colour="After Adding Links")) +
geom_line(aes(y = efBefore, colour = "Before Adding Links")) +
geom_line(aes(y = efgr, colour = "Random graph"))+
ylab(label="Efficiency After Failure") +
xlab("Number of Failures")+
scale_colour_manual(values=c("blue", "red","green"))+
scale_x_continuous(breaks=attackSeq)
st1<-paste0(type,"_",attackMethod,"_",n0,"_",maxNumberOfAttacks,"_",Linklimit,".png")
png(st1, width = 800)
print(efPlot)
dev.off()
