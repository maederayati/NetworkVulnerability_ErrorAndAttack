geom_line(aes(y = efAfter, colour="After Adding Links")) +
geom_line(aes(y = efBefore, colour = "Before Adding Links")) +
geom_line(aes(y = efgr, colour = "Random graph same size as added"))+
ylab(label="Efficiency After Attack") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("blue", "red","green"))+
scale_x_continuous(breaks=attackSeq)
st1<-paste0(type,"_",attackMethod,"_",n0,"_",maxNumberOfAttacks,"_",linksAdded,".png")
png(st1)
print(efPlot)
dev.off()
benefit
length(benefit)
length(combinations)
ecount(g)
g
g0
###### add links
t<-0
Flag<-1
k<-maxNumberOfAttacks
at0<-findAttack(g0,k)
vul0<-findVulnerability(g0,at0)
ef0<-findEfficiency(g0,at0)
g<-g0
vul<-vul0
ef<-ef0
library(igraph)
library(gridExtra)
library(ggplot2)
n0<-100
maxNumberOfAttacks<-10
attackSeq<-seq(0,maxNumberOfAttacks,by=1)
set.seed(123)
g0 <- sample_pa(n0,directed = F)
V(g0)$name <-V(g0)
type<-"AttackVsEfficiency_"
attackMethod<-"Betweenness"
Linklimit<-20
#####################functions
findAttack<-function(g,k){
if(k!=0){
a1<-vector()
z<-1
bts<-betweenness(g,directed = F)
od<-sort(unique(bts),decreasing = T)
a1<-names(subset(bts,bts==od[z]))
while(length(a1)<k){
z<-z+1
a1<-c(a1,names(subset(bts,bts==od[z])))
}
if(length(a1)>k){
a1<-a1[1:k]
}
a1
}
else
NA
}
graphAfterAttackWith<-function(g,at){
if(is.na(at[1]))
g
else{
gTemp<-delete.vertices(g,at)
gTemp2<-add.vertices(gTemp,length(at),name=at)
gTemp2
}
}
graphAfterAttackWithout<-function(g,at){
if(is.na(at[1]))
g
else{
gTemp<-delete.vertices(g,at)
gTemp
}
}
findEfficiency<-function(g,at){
gTemp<-graphAfterAttackWith(g,at)
dtr<-distance_table(gTemp,directed = F)$res
e<-2*sum(dtr*(1/(1:length(dtr))))/(vcount(gTemp)*(vcount(gTemp)-1))
e
}
findVulnerability<-function(g,at){
if(findEfficiency(g,NA)!=0)
(1-(findEfficiency(g,at)/findEfficiency(g,NA)))
else
0
}
getCombinations<-function(g){
d<-degree(g)
combinations<-combn(d,2,simplify = F)
combinations
}
############intialize vectors
efAfter<-vector()
efBefore<-vector()
efgr<-vector()
####### add links
t<-0
Flag<-1
k<-maxNumberOfAttacks
at0<-findAttack(g0,k)
vul0<-findVulnerability(g0,at0)
ef0<-findEfficiency(g0,at0)
g<-g0
vul<-vul0
ef<-ef0
while(t<Linklimit && Flag){
print(t)
at<-findAttack(g,k)
gAt<-graphAfterAttackWithout(g,at)
combinations<-getCombinations(gAt)
benefit<-sapply(combinations,function(x){
n<-names(x)
gTmp<-g+edge(n[1],n[2])
at<-findAttack(gTmp,k)
vull<-findVulnerability(gTmp,at)
vul-vull
})
if(length(which(benefit>0))==0){
Flag<-0
}
else{
selectedCom<-combinations[[which(benefit==max(benefit))[1]]]
n<-names(selectedCom)
g<-g+edge(n[1],n[2])
at<-findAttack(g,k)
vul<-findVulnerability(g,at)
ef<-findEfficiency(g,at)
t<-t+1
}
}
ecount(g)
ecount(g0)
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/CleanResults/AttackVsEfficiency/BetweennessAttack/AttackVsEfficiency_BetweennessAttack.R')
set.seed(123)
gr<-erdos.renyi.game(n=n0,p.or.m = (ecount(g0))+Linklimit,type = "gnm")
V(gr)$name <-V(gr)
ecount(g)
###attack graphs
for(k in attackSeq){
###########attack original
at0<-findAttack(g0,k)
efBefore<-c(efBefore,findEfficiency(g0,at0))
##################attack updated
atr<-findAttack(gr,k)
efgr<-c(efgr,findEfficiency(gr,atr))
####################attack random
at<-findAttack(g,k)
efAfter<-c(efAfter,findEfficiency(g,at))
print(k)
}
###################################plot result###########################
df<-cbind.data.frame(attackSeq,efAfter,efBefore,efgr)
names(df)<-c("numberOfAttacks","efAfter","efBefore","efgr")
efPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = efAfter, colour="After Adding Links")) +
geom_line(aes(y = efBefore, colour = "Before Adding Links")) +
geom_line(aes(y = efgr, colour = "Random graph same size as added"))+
ylab(label="Efficiency After Attack") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("blue", "red","green"))+
scale_x_continuous(breaks=attackSeq)
st1<-paste0(type,"_",attackMethod,"_",n0,"_",maxNumberOfAttacks,"_",Linklimit,".png")
png(st1)
print(efPlot)
dev.off()
###################################plot result###########################
df<-cbind.data.frame(attackSeq,efAfter,efBefore,efgr)
names(df)<-c("numberOfAttacks","efAfter","efBefore","efgr")
efPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = efAfter, colour="After Adding Links")) +
geom_line(aes(y = efBefore, colour = "Before Adding Links")) +
geom_line(aes(y = efgr, colour = "Random graph"))+
ylab(label="Efficiency After Attack") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("blue", "red","green"))+
scale_x_continuous(breaks=attackSeq)
st1<-paste0(type,"_",attackMethod,"_",n0,"_",maxNumberOfAttacks,"_",Linklimit,".png")
png(st1)
print(efPlot)
dev.off()
###################################plot result###########################
df<-cbind.data.frame(attackSeq,efAfter,efBefore,efgr)
names(df)<-c("numberOfAttacks","efAfter","efBefore","efgr")
efPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = efAfter, colour="After Adding Links")) +
geom_line(aes(y = efBefore, colour = "Before Adding Links")) +
geom_line(aes(y = efgr, colour = "Random graph"))+
ylab(label="Efficiency After Attack") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("blue", "red","green"))+
scale_x_continuous(breaks=attackSeq)
st1<-paste0(type,"_",attackMethod,"_",n0,"_",maxNumberOfAttacks,"_",Linklimit,".png")
png(st1, width = 400)
print(efPlot)
dev.off()
###################################plot result###########################
df<-cbind.data.frame(attackSeq,efAfter,efBefore,efgr)
names(df)<-c("numberOfAttacks","efAfter","efBefore","efgr")
efPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = efAfter, colour="After Adding Links")) +
geom_line(aes(y = efBefore, colour = "Before Adding Links")) +
geom_line(aes(y = efgr, colour = "Random graph"))+
ylab(label="Efficiency After Attack") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("blue", "red","green"))+
scale_x_continuous(breaks=attackSeq)
st1<-paste0(type,"_",attackMethod,"_",n0,"_",maxNumberOfAttacks,"_",Linklimit,".png")
png(st1, width = 1000)
print(efPlot)
dev.off()
###################################plot result###########################
df<-cbind.data.frame(attackSeq,efAfter,efBefore,efgr)
names(df)<-c("numberOfAttacks","efAfter","efBefore","efgr")
efPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = efAfter, colour="After Adding Links")) +
geom_line(aes(y = efBefore, colour = "Before Adding Links")) +
geom_line(aes(y = efgr, colour = "Random graph"))+
ylab(label="Efficiency After Attack") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("blue", "red","green"))+
scale_x_continuous(breaks=attackSeq)
st1<-paste0(type,"_",attackMethod,"_",n0,"_",maxNumberOfAttacks,"_",Linklimit,".png")
png(st1, width = 800)
print(efPlot)
dev.off()
write.csv(df,file="temp.csv")
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/CleanResults/AttackVsEfficiency/AttackVsEfficiency_DegreeAttack.R')
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/CleanResults/AttackVsEfficiency/AttackVsEfficiency_DegreeAttack.R')
set.seed(123)
gr<-erdos.renyi.game(n=n0,p.or.m = (ecount(g0))+Linklimit,type = "gnm")
V(gr)$name <-V(gr)
###attack graphs
for(k in attackSeq){
###########attack original
at0<-findAttack(g0,k)
efBefore<-c(efBefore,findEfficiency(g0,at0))
##################attack updated
atr<-findAttack(gr,k)
efgr<-c(efgr,findEfficiency(gr,atr))
####################attack random
at<-findAttack(g,k)
efAfter<-c(efAfter,findEfficiency(g,at))
linksAdded<-c(linksAdded,t)
print(k)
}
###################################plot result###########################
df<-cbind.data.frame(attackSeq,efAfter,efBefore,efgr)
names(df)<-c("numberOfAttacks","efAfter","efBefore","efgr")
efPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = efAfter, colour="After Adding Links")) +
geom_line(aes(y = efBefore, colour = "Before Adding Links")) +
geom_line(aes(y = efgr, colour = "Random graph same size as added"))+
ylab(label="Efficiency After Attack") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("blue", "red","green"))+
scale_x_continuous(breaks=attackSeq)
st1<-paste0(type,"_",attackMethod,"_",n0,"_",maxNumberOfAttacks,"_",linksAdded,".png")
png(st1)
print(efPlot)
dev.off()
###attack graphs
for(k in attackSeq){
###########attack original
at0<-findAttack(g0,k)
efBefore<-c(efBefore,findEfficiency(g0,at0))
##################attack updated
atr<-findAttack(gr,k)
efgr<-c(efgr,findEfficiency(gr,atr))
####################attack random
at<-findAttack(g,k)
efAfter<-c(efAfter,findEfficiency(g,at))
print(k)
}
###################################plot result###########################
df<-cbind.data.frame(attackSeq,efAfter,efBefore,efgr)
names(df)<-c("numberOfAttacks","efAfter","efBefore","efgr")
efPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = efAfter, colour="After Adding Links")) +
geom_line(aes(y = efBefore, colour = "Before Adding Links")) +
geom_line(aes(y = efgr, colour = "Random graph same size as added"))+
ylab(label="Efficiency After Attack") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("blue", "red","green"))+
scale_x_continuous(breaks=attackSeq)
st1<-paste0(type,"_",attackMethod,"_",n0,"_",maxNumberOfAttacks,"_",Linklimit,".png")
png(st1)
print(efPlot)
dev.off()
###################################plot result###########################
df<-cbind.data.frame(attackSeq,efAfter,efBefore,efgr)
names(df)<-c("numberOfAttacks","efAfter","efBefore","efgr")
attackSeq
efAfter
efBefore
efAfter<-vector()
efBefore<-vector()
efgr<-vector()
###attack graphs
for(k in attackSeq){
###########attack original
at0<-findAttack(g0,k)
efBefore<-c(efBefore,findEfficiency(g0,at0))
##################attack updated
atr<-findAttack(gr,k)
efgr<-c(efgr,findEfficiency(gr,atr))
####################attack random
at<-findAttack(g,k)
efAfter<-c(efAfter,findEfficiency(g,at))
print(k)
}
###################################plot result###########################
df<-cbind.data.frame(attackSeq,efAfter,efBefore,efgr)
names(df)<-c("numberOfAttacks","efAfter","efBefore","efgr")
efPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = efAfter, colour="After Adding Links")) +
geom_line(aes(y = efBefore, colour = "Before Adding Links")) +
geom_line(aes(y = efgr, colour = "Random graph same size as added"))+
ylab(label="Efficiency After Attack") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("blue", "red","green"))+
scale_x_continuous(breaks=attackSeq)
st1<-paste0(type,"_",attackMethod,"_",n0,"_",maxNumberOfAttacks,"_",Linklimit,".png")
png(st1)
print(efPlot)
dev.off()
###################################plot result###########################
df<-cbind.data.frame(attackSeq,efAfter,efBefore,efgr)
names(df)<-c("numberOfAttacks","efAfter","efBefore","efgr")
efPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = efAfter, colour="After Adding Links")) +
geom_line(aes(y = efBefore, colour = "Before Adding Links")) +
geom_line(aes(y = efgr, colour = "Random graph same size as added"))+
ylab(label="Efficiency After Attack") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("blue", "red","green"))+
scale_x_continuous(breaks=attackSeq)
st1<-paste0(type,"_",attackMethod,"_",n0,"_",maxNumberOfAttacks,"_",Linklimit,".png")
png(st1, width = 800)
print(efPlot)
dev.off()
getwd()
###################################plot result###########################
df<-cbind.data.frame(attackSeq,efAfter,efBefore,efgr)
names(df)<-c("numberOfAttacks","efAfter","efBefore","efgr")
efPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = efAfter, colour="After Adding Links")) +
geom_line(aes(y = efBefore, colour = "Before Adding Links")) +
geom_line(aes(y = efgr, colour = "Random graph"))+
ylab(label="Efficiency After Attack") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("blue", "red","green"))+
scale_x_continuous(breaks=attackSeq)
st1<-paste0(type,"_",attackMethod,"_",n0,"_",maxNumberOfAttacks,"_",Linklimit,".png")
png(st1, width = 800)
print(efPlot)
dev.off()
write.csv(df,file="tmp.csv")
getwd()
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/CleanResults/AttackVsEfficiency/AttackVsVulnerability_BetweennessAttack.R')
###################################plot result###########################
df<-cbind.data.frame(attackSeq,vulAfter,vulBefore,vulgr)
names(df)<-c("numberOfAttacks","vulAfter","vulBefore","vulgr")
for(k in attackSeq){
###########attack original
at0<-findAttack(g0,k)
vulBefore<-c(vulBefore,findVulnerability(g0,at0))
##################attack updated
atr<-findAttack(gr,k)
vulgr<-c(vul,findVulnerability(gr,atr))
####################attack random
at<-findAttack(g,k)
vulAfter<-c(vulAfter,findVulnerability(g,at))
print(k)
}
###################################plot result###########################
df<-cbind.data.frame(attackSeq,vulAfter,vulBefore,vulgr)
names(df)<-c("numberOfAttacks","vulAfter","vulBefore","vulgr")
vulPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = vulAfter, colour="After Adding Links")) +
geom_line(aes(y = vulBefore, colour = "Before Adding Links")) +
geom_line(aes(y = vulgr, colour = "Random graph"))+
ylab(label="Vulnerability to Attack") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("blue", "red","green"))+
scale_x_continuous(breaks=attackSeq)
st1<-paste0(type,"_",attackMethod,"_",n0,"_",maxNumberOfAttacks,"_",Linklimit,".png")
png(st1, width = 800)
print(efPlot)
dev.off()
st1<-paste0(type,"_",attackMethod,"_",n0,"_",maxNumberOfAttacks,"_",Linklimit,".png")
png(st1, width = 800)
print(vulPlot)
dev.off()
set.seed(123)
gr<-erdos.renyi.game(n=n0,p.or.m = (ecount(g0))+Linklimit,type = "gnm")
V(gr)$name <-V(gr)
###attack graphs
for(k in attackSeq){
###########attack original
at0<-findAttack(g0,k)
vulBefore<-c(vulBefore,findVulnerability(g0,at0))
##################attack updated
atr<-findAttack(gr,k)
vulgr<-c(vul,findVulnerability(gr,atr))
####################attack random
at<-findAttack(g,k)
vulAfter<-c(vulAfter,findVulnerability(g,at))
print(k)
}
###################################plot result###########################
df<-cbind.data.frame(attackSeq,vulAfter,vulBefore,vulgr)
names(df)<-c("numberOfAttacks","vulAfter","vulBefore","vulgr")
vulAfter<-vector()
vulBefore<-vector()
vulgr<-vector()
for(k in attackSeq){
###########attack original
at0<-findAttack(g0,k)
vulBefore<-c(vulBefore,findVulnerability(g0,at0))
##################attack updated
atr<-findAttack(gr,k)
vulgr<-c(vul,findVulnerability(gr,atr))
####################attack random
at<-findAttack(g,k)
vulAfter<-c(vulAfter,findVulnerability(g,at))
print(k)
}
###################################plot result###########################
df<-cbind.data.frame(attackSeq,vulAfter,vulBefore,vulgr)
names(df)<-c("numberOfAttacks","vulAfter","vulBefore","vulgr")
vulAfter
length(vulAfter)
length(attackSeq)
length(vulBefore)
###################################plot result###########################
df<-cbind.data.frame(attackSeq,vulAfter,vulBefore,vulgr)
names(df)<-c("numberOfAttacks","vulAfter","vulBefore","vulgr")
###################################plot result###########################
df<-cbind.data.frame(attackSeq,vulAfter,vulBefore,vulgr)
vulBefore
attackSeq
vulAfter
cbind.data.frame(attackSeq,vulAfter,vulBefore,vulgr)
vulAfter<-vector()
vulBefore<-vector()
vulgr<-vector()
###################################plot result###########################
df<-cbind.data.frame(attackSeq,vulAfter,vulBefore,vulgr)
names(df)<-c("numberOfAttacks","vulAfter","vulBefore","vulgr")
df
df<-data.frame()
vulAfter<-vector()
vulBefore<-vector()
vulgr<-vector()
for(k in attackSeq){
###########attack original
at0<-findAttack(g0,k)
vulBefore<-c(vulBefore,findVulnerability(g0,at0))
##################attack updated
atr<-findAttack(gr,k)
vulgr<-c(vul,findVulnerability(gr,atr))
####################attack random
at<-findAttack(g,k)
vulAfter<-c(vulAfter,findVulnerability(g,at))
print(k)
}
###################################plot result###########################
df<-cbind.data.frame(attackSeq,vulAfter,vulBefore,vulgr)
names(df)<-c("numberOfAttacks","vulAfter","vulBefore","vulgr")
df
df<-cbind.data.frame(attackSeq,vulAfter,vulBefore,vulgr)
vulAfter
vulBefore
vulgr
vulAfter<-vector()
vulBefore<-vector()
vulgr<-vector()
set.seed(123)
gr<-erdos.renyi.game(n=n0,p.or.m = (ecount(g0))+Linklimit,type = "gnm")
V(gr)$name <-V(gr)
###attack graphs
for(k in attackSeq){
###########attack original
at0<-findAttack(g0,k)
vulBefore<-c(vulBefore,findVulnerability(g0,at0))
##################attack updated
atr<-findAttack(gr,k)
vulgr<-c(vulgr,findVulnerability(gr,atr))
####################attack random
at<-findAttack(g,k)
vulAfter<-c(vulAfter,findVulnerability(g,at))
print(k)
}
###################################plot result###########################
df<-cbind.data.frame(attackSeq,vulAfter,vulBefore,vulgr)
names(df)<-c("numberOfAttacks","vulAfter","vulBefore","vulgr")
vulPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = vulAfter, colour="After Adding Links")) +
geom_line(aes(y = vulBefore, colour = "Before Adding Links")) +
geom_line(aes(y = vulgr, colour = "Random graph"))+
ylab(label="Vulnerability to Attack") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("blue", "red","green"))+
scale_x_continuous(breaks=attackSeq)
st1<-paste0(type,"_",attackMethod,"_",n0,"_",maxNumberOfAttacks,"_",Linklimit,".png")
png(st1, width = 800)
print(vulPlot)
dev.off()
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/CleanResults/AttackVsEfficiency/AttackVsVulnerability_DegreeAttack.R')
df
