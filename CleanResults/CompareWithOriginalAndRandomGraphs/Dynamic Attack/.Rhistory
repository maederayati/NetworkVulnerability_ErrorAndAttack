at<-findFailure(gt3,0)
sizeAfter<-c(sizeAfter,findLCC(graphAfterAttackWith(gt3,at)))
at<-c()
for(k in 2:length(attackSeq)){
set.seed(123)
at<-c(at,findFailure(gt1,1))
gt1<-delete.vertices(gt1,tail(at,1))
print(k)
}
for(k in 1:(length(attackSeq)-1)){
sizeBefore<-c(sizeBefore,findLCC(graphAfterAttackWith(g0,at[1:k])))
sizegr<-c(sizegr,findLCC(graphAfterAttackWith(gr,at[1:k])))
sizeAfter<-c(sizeAfter,findLCC(graphAfterAttackWith(g,at[1:k])))
print(k)
}
###################################plot result###########################
df<-cbind.data.frame(attackSeq,sizeAfter,sizeBefore,sizegr)
names(df)<-c("numberOfAttacks","sizeAfter","sizeBefore","sizegr")
sizePlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = sizeAfter, colour="After Adding Links")) +
geom_line(aes(y = sizeBefore, colour = "Before Adding Links")) +
geom_line(aes(y = sizegr, colour = "Random graph"))+
ylab(label="Size of Largest Connected Component") +
xlab("Number of Failures")+
scale_colour_manual(values=c("blue", "red","green"))+
scale_x_continuous(breaks=attackSeq)
st1<-paste0(type,"_",attackMethod,"_",n0,"_",maxNumberOfAttacks,"_",Linklimit,".png")
png(st1, width = 800)
print(sizePlot)
dev.off()
findLCC<-function(g){
cl<-clusters(g)
max(cl$csize )
}
#######create random graph of same size as added
set.seed(123)
gr<-erdos.renyi.game(n=n0,p.or.m = (ecount(g0))+Linklimit,type = "gnm")
V(gr)$name <-V(gr)
############intialize vectors
sizeAfter<-vector()
sizeBefore<-vector()
sizegr<-vector()
##############################attack graphs
gt1<-g0
gt2<-gr
gt3<-g
set.seed(123)
###########attack original
at0<-findFailure(gt1,0)
sizeBefore<-c(sizeBefore,findLCC(graphAfterAttackWith(gt1,at0)))
##################attack updated
set.seed(123)
atr<-findFailure(gt2,0)
sizegr<-c(sizegr,findLCC(graphAfterAttackWith(gt2,atr)))
####################attack random
set.seed(123)
at<-findFailure(gt3,0)
sizeAfter<-c(sizeAfter,findLCC(graphAfterAttackWith(gt3,at)))
at<-c()
for(k in 2:length(attackSeq)){
set.seed(123)
at<-c(at,findFailure(gt1,1))
gt1<-delete.vertices(gt1,tail(at,1))
print(k)
}
for(k in 1:(length(attackSeq)-1)){
sizeBefore<-c(sizeBefore,findLCC(graphAfterAttackWith(g0,at[1:k])))
sizegr<-c(sizegr,findLCC(graphAfterAttackWith(gr,at[1:k])))
sizeAfter<-c(sizeAfter,findLCC(graphAfterAttackWith(g,at[1:k])))
print(k)
}
###################################plot result###########################
df<-cbind.data.frame(attackSeq,sizeAfter,sizeBefore,sizegr)
names(df)<-c("numberOfAttacks","sizeAfter","sizeBefore","sizegr")
sizePlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = sizeAfter, colour="After Adding Links")) +
geom_line(aes(y = sizeBefore, colour = "Before Adding Links")) +
geom_line(aes(y = sizegr, colour = "Random graph"))+
ylab(label="Size of Largest Connected Component") +
xlab("Number of Failures")+
scale_colour_manual(values=c("blue", "red","green"))+
scale_x_continuous(breaks=attackSeq)
st1<-paste0(type,"_",attackMethod,"_",n0,"_",maxNumberOfAttacks,"_",Linklimit,".png")
png(st1, width = 800)
print(sizePlot)
dev.off()
findLCC(graphAfterAttackWith(g0,at[1:k]))
graphAfterAttackWith(g0,at[1:k])
at
#######create random graph of same size as added
set.seed(123)
gr<-erdos.renyi.game(n=n0,p.or.m = (ecount(g0))+Linklimit,type = "gnm")
V(gr)$name <-V(gr)
############intialize vectors
sizeAfter<-vector()
sizeBefore<-vector()
sizegr<-vector()
##############################attack graphs
gt1<-g0
gt2<-gr
gt3<-g
set.seed(123)
###########attack original
at0<-findFailure(gt1,0)
sizeBefore<-c(sizeBefore,findLCC(graphAfterAttackWith(gt1,at0)))
##################attack updated
set.seed(123)
atr<-findFailure(gt2,0)
sizegr<-c(sizegr,findLCC(graphAfterAttackWith(gt2,atr)))
####################attack random
set.seed(123)
at<-findFailure(gt3,0)
sizeAfter<-c(sizeAfter,findLCC(graphAfterAttackWith(gt3,at)))
at<-c()
for(k in 2:length(attackSeq)){
set.seed(123)
at<-c(at,findFailure(gt1,1))
gt1<-delete.vertices(gt1,tail(at,1))
print(k)
}
#######create random graph of same size as added
set.seed(123)
gr<-erdos.renyi.game(n=n0,p.or.m = (ecount(g0))+Linklimit,type = "gnm")
V(gr)$name <-V(gr)
############intialize vectors
sizeAfter<-vector()
sizeBefore<-vector()
sizegr<-vector()
###attack graphs
for(k in attackSeq){
###########attack original
at0<-findAttack(g0,k)
gTmp<-graphAfterAttackWith(g0,at0)
sizeBefore<-c(sizeBefore,findLCC(gTmp))
##################attack updated
atr<-findAttack(gr,k)
gTmp<-graphAfterAttackWith(gr,atr)
sizegr<-c(sizegr,findLCC(gTmp))
####################attack random
at<-findAttack(g,k)
gTmp<-graphAfterAttackWith(g,at)
sizeAfter<-c(sizeAfter,findLCC(gTmp))
print(k)
}
###################################plot result###########################
df<-cbind.data.frame(attackSeq,sizeAfter,sizeBefore,sizegr)
names(df)<-c("numberOfAttacks","sizeAfter","sizeBefore","sizegr")
sizePlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = sizeAfter, colour="After Adding Links")) +
geom_line(aes(y = sizeBefore, colour = "Before Adding Links")) +
geom_line(aes(y = sizegr, colour = "Random graph"))+
ylab(label="Size of Largest Connected Component") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("blue", "red","green"))+
scale_x_continuous(breaks=attackSeq)
st1<-paste0(type,"_",attackMethod,"_",n0,"_",maxNumberOfAttacks,"_",Linklimit,".png")
png(st1, width = 800)
print(sizePlot)
dev.off()
write.csv(df,file="df.csv")
library(igraph)
library(gridExtra)
library(ggplot2)
n0<-100
maxNumberOfAttacks<-10
attackSeq<-seq(0,maxNumberOfAttacks,by=1)
set.seed(123)
g0 <- sample_pa(n0,directed = F)
V(g0)$name <-V(g0)
type<-"AttackVsLCC_"
attackMethod<-"Degree"
Linklimit<-20
#####################functions
findAttack<-function(g,k){
if(k!=0){
a1<-vector()
gtmp<-g
for(i in 1:k){
dg<-degree(gtmp)
at<-names(dg[which(dg==max(dg))])[1]
a1<-c(a1,at)
gtmp<-delete.vertices(gtmp,at)
}
a1
}
else
NA
}
graphAfterAttackWith<-function(g,at){
if(is.na(at[1]))
g
else{
gTemp<-delete.vertices(g,at)
gTemp2<-add.vertices(gTemp,length(at),name=at)
gTemp2
}
}
graphAfterAttackWithout<-function(g,at){
if(is.na(at[1]))
g
else{
gTemp<-delete.vertices(g,at)
gTemp
}
}
findEfficiency<-function(g,at){
gTemp<-graphAfterAttackWith(g,at)
dtr<-distance_table(gTemp,directed = F)$res
e<-2*sum(dtr*(1/(1:length(dtr))))/(vcount(gTemp)*(vcount(gTemp)-1))
e
}
findVulnerability<-function(g,at){
if(findEfficiency(g,NA)!=0)
(1-(findEfficiency(g,at)/findEfficiency(g,NA)))
else
0
}
getCombinations<-function(g){
d<-degree(g)
combinations<-combn(d,2,simplify = F)
combinations
}
############intialize vectors
efAfter<-vector()
efBefore<-vector()
efgr<-vector()
####### add links
t<-0
Flag<-1
k<-maxNumberOfAttacks
at0<-findAttack(g0,k)
vul0<-findVulnerability(g0,at0)
ef0<-findEfficiency(g0,at0)
g<-g0
vul<-vul0
ef<-ef0
while(t<Linklimit && Flag){
print(t)
at<-findAttack(g,k)
gAt<-graphAfterAttackWithout(g,at)
combinations<-getCombinations(gAt)
benefit<-sapply(combinations,function(x){
n<-names(x)
gTmp<-g+edge(n[1],n[2])
at<-findAttack(gTmp,k)
vull<-findVulnerability(gTmp,at)
vul-vull
})
if(length(which(benefit>0))==0){
Flag<-0
}
else{
selectedCom<-combinations[[which(benefit==max(benefit))[1]]]
n<-names(selectedCom)
g<-g+edge(n[1],n[2])
at<-findAttack(g,k)
vul<-findVulnerability(g,at)
ef<-findEfficiency(g,at)
t<-t+1
}
}
#######create random graph of same size as added
set.seed(123)
gr<-erdos.renyi.game(n=n0,p.or.m = (ecount(g0))+Linklimit,type = "gnm")
V(gr)$name <-V(gr)
############intialize vectors
sizeAfter<-vector()
sizeBefore<-vector()
sizegr<-vector()
###attack graphs
for(k in attackSeq){
###########attack original
at0<-findAttack(g0,k)
gTmp<-graphAfterAttackWith(g0,at0)
sizeBefore<-c(sizeBefore,findLCC(gTmp))
##################attack updated
atr<-findAttack(gr,k)
gTmp<-graphAfterAttackWith(gr,atr)
sizegr<-c(sizegr,findLCC(gTmp))
####################attack random
at<-findAttack(g,k)
gTmp<-graphAfterAttackWith(g,at)
sizeAfter<-c(sizeAfter,findLCC(gTmp))
print(k)
}
###################################plot result###########################
df<-cbind.data.frame(attackSeq,sizeAfter,sizeBefore,sizegr)
names(df)<-c("numberOfAttacks","sizeAfter","sizeBefore","sizegr")
sizePlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = sizeAfter, colour="After Adding Links")) +
geom_line(aes(y = sizeBefore, colour = "Before Adding Links")) +
geom_line(aes(y = sizegr, colour = "Random graph"))+
ylab(label="Size of Largest Connected Component") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("blue", "red","green"))+
scale_x_continuous(breaks=attackSeq)
st1<-paste0(type,"_",attackMethod,"_",n0,"_",maxNumberOfAttacks,"_",Linklimit,".png")
png(st1, width = 800)
print(sizePlot)
dev.off()
sizeAfter
findLCC<-function(g){
cl<-clusters(g)
max(cl$csize )
}
#######create random graph of same size as added
set.seed(123)
gr<-erdos.renyi.game(n=n0,p.or.m = (ecount(g0))+Linklimit,type = "gnm")
V(gr)$name <-V(gr)
############intialize vectors
sizeAfter<-vector()
sizeBefore<-vector()
sizegr<-vector()
###attack graphs
for(k in attackSeq){
###########attack original
at0<-findAttack(g0,k)
gTmp<-graphAfterAttackWith(g0,at0)
sizeBefore<-c(sizeBefore,findLCC(gTmp))
##################attack updated
atr<-findAttack(gr,k)
gTmp<-graphAfterAttackWith(gr,atr)
sizegr<-c(sizegr,findLCC(gTmp))
####################attack random
at<-findAttack(g,k)
gTmp<-graphAfterAttackWith(g,at)
sizeAfter<-c(sizeAfter,findLCC(gTmp))
print(k)
}
###################################plot result###########################
df<-cbind.data.frame(attackSeq,sizeAfter,sizeBefore,sizegr)
names(df)<-c("numberOfAttacks","sizeAfter","sizeBefore","sizegr")
sizePlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = sizeAfter, colour="After Adding Links")) +
geom_line(aes(y = sizeBefore, colour = "Before Adding Links")) +
geom_line(aes(y = sizegr, colour = "Random graph"))+
ylab(label="Size of Largest Connected Component") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("blue", "red","green"))+
scale_x_continuous(breaks=attackSeq)
st1<-paste0(type,"_",attackMethod,"_",n0,"_",maxNumberOfAttacks,"_",Linklimit,".png")
png(st1, width = 800)
print(sizePlot)
dev.off()
write.csv(df,file="df.csv")
type<-"AttackVsVulnerability_"
attackMethod<-"Degree"
#######create random graph of same size as added
set.seed(123)
gr<-erdos.renyi.game(n=n0,p.or.m = (ecount(g0))+Linklimit,type = "gnm")
V(gr)$name <-V(gr)
###attack graphs
for(k in attackSeq){
###########attack original
at0<-findAttack(g0,k)
vulBefore<-c(vulBefore,findVulnerability(g0,at0))
##################attack updated
atr<-findAttack(gr,k)
vulgr<-c(vulgr,findVulnerability(gr,atr))
####################attack random
at<-findAttack(g,k)
vulAfter<-c(vulAfter,findVulnerability(g,at))
print(k)
}
###################################plot result###########################
df<-cbind.data.frame(attackSeq,vulAfter,vulBefore,vulgr)
names(df)<-c("numberOfAttacks","vulAfter","vulBefore","vulgr")
vulPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = vulAfter, colour="After Adding Links")) +
geom_line(aes(y = vulBefore, colour = "Before Adding Links")) +
geom_line(aes(y = vulgr, colour = "Random graph"))+
ylab(label="Vulnerability to Attack") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("blue", "red","green"))+
scale_x_continuous(breaks=attackSeq)
st1<-paste0(type,"_",attackMethod,"_",n0,"_",maxNumberOfAttacks,"_",Linklimit,".png")
png(st1, width = 800)
print(vulPlot)
dev.off()
vulAfter<-vector()
vulBefore<-vector()
vulgr<-vector()
#######create random graph of same size as added
set.seed(123)
gr<-erdos.renyi.game(n=n0,p.or.m = (ecount(g0))+Linklimit,type = "gnm")
V(gr)$name <-V(gr)
###attack graphs
for(k in attackSeq){
###########attack original
at0<-findAttack(g0,k)
vulBefore<-c(vulBefore,findVulnerability(g0,at0))
##################attack updated
atr<-findAttack(gr,k)
vulgr<-c(vulgr,findVulnerability(gr,atr))
####################attack random
at<-findAttack(g,k)
vulAfter<-c(vulAfter,findVulnerability(g,at))
print(k)
}
###################################plot result###########################
df<-cbind.data.frame(attackSeq,vulAfter,vulBefore,vulgr)
names(df)<-c("numberOfAttacks","vulAfter","vulBefore","vulgr")
vulPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = vulAfter, colour="After Adding Links")) +
geom_line(aes(y = vulBefore, colour = "Before Adding Links")) +
geom_line(aes(y = vulgr, colour = "Random graph"))+
ylab(label="Vulnerability to Attack") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("blue", "red","green"))+
scale_x_continuous(breaks=attackSeq)
st1<-paste0(type,"_",attackMethod,"_",n0,"_",maxNumberOfAttacks,"_",Linklimit,".png")
png(st1, width = 800)
print(vulPlot)
dev.off()
write.csv(df,file="df.csv")
write.csv(df,file="dff.csv")
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/CleanResults/CompareWithOriginalAndRandomGraphs/Dynamic Attack/AttackVsVulnerebility_BetweennessAttack.R')
write.csv(df, file = "df.csv")
library(igraph)
library(gridExtra)
library(ggplot2)
n0<-100
maxNumberOfAttacks<-10
attackSeq<-seq(0,maxNumberOfAttacks,by=1)
set.seed(123)
g0 <- sample_pa(n0,directed = F)
V(g0)$name <-V(g0)
type<-"ModifiedAddedLinksVsRobustness_"
attackMethod<-"Degree"
Linklimit<-50
#####################functions
findAttack<-function(g,k){
if(k!=0){
a1<-vector()
z<-1
dg<-degree(g)
od<-sort(unique(dg),decreasing = T)
a1<-names(subset(dg,dg==od[z]))
while(length(a1)<k){
z<-z+1
a1<-c(a1,names(subset(dg,dg==od[z])))
}
if(length(a1)>k)
a1<-a1[1:k]
a1
}
else
NA
}
graphAfterAttackWith<-function(g,at){
if(is.na(at[1]))
g
else{
gTemp<-delete.vertices(g,at)
gTemp2<-add.vertices(gTemp,length(at),name=at)
gTemp2
}
}
graphAfterAttackWithout<-function(g,at){
if(is.na(at[1]))
g
else{
gTemp<-delete.vertices(g,at)
gTemp
}
}
findEfficiency<-function(g,at){
gTemp<-graphAfterAttackWith(g,at)
dtr<-distance_table(gTemp,directed = F)$res
e<-2*sum(dtr*(1/(1:length(dtr))))/(vcount(gTemp)*(vcount(gTemp)-1))
e
}
findVulnerability<-function(g,at){
if(findEfficiency(g,NA)!=0)
(1-(findEfficiency(g,at)/findEfficiency(g,NA)))
else
0
}
getCombinations<-function(g){
d<-degree(g)
combinations<-combn(d,2,simplify = F)
combinations
}
findRobustness<-function(g){
at<-findAttack(g,maxNumberOfAttacks)
names<-names(V(g))
n<-vcount(g)
efsum<-0
m<-distances(g)
rname<-row.names(m)
for(i in at){
#with<-graphAfterAttackWith(g,i)
#without<-graphAfterAttackWithout(g,i)
l<-which(rname==i)
m2<-m[-l,-l]
sum<-0
for(j in 1:(nrow(m2)-1)){
for(k in (j+1):ncol(m2)){
sum<-sum+(1/m2[j,k])
#print((1/m2[i,j]))
}
}
efg<-(2*sum)
efsum<-efsum-(findEfficiency(g,i)*n*(n-1))+efg
}
1-(efsum/(maxNumberOfAttacks*(n-1)*(n-2)))
}
findRobustness(g0)
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/CleanResults/AddedlinksVsRobustness/AddedLinksVsRobustness_DegreeAttack_modified.R')
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/CleanResults/AddedlinksVsRobustness/AddedLinksVsRobustness_DegreeAttack_modified.R')
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/CleanResults/AddedlinksVsRobustness/AddedLinksVsRobustness_BetweennessAttack_modified.R')
getwd()
