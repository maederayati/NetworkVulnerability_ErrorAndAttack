}
if(class(d)=="matrix"){
b<-ncol(d)
d<-apply(d,2,max) #d[order(d[,1], decreasing=F),, drop=FALSE]
#apply(d,2,sort,drop=F)
#d[order(d)]
#apply(d,2,function(x)x[order(x)])
print(d)
m<-c(m,rownames(d)[1])}
else
m<-c(m,names(d))
}
m
min(c(1,2),c(1,4))
?sort
for(i in 1:cl$no){
namesOfcl<-names(cl$membership[which(cl$membership==i)])
sub<-subset(bts, names(bts) %in%namesOfcl)
d<-distances(gAt,v=names(sub),to=names(sub))
for(j in 1:nrow(d)){
d[j,]<-sort(d[j,], decreasing = F)
}
if(class(d)=="matrix"){
b<-ncol(d)
d<-apply(d,2,sort,index.return=T)
print(d)
m<-c(m,names(d))}
else
m<-c(m,names(d))
}
m
cl<-clusters(gAt)
bts<-betweenness(gAt,directed = F)
m<-vector()
for(i in 1:cl$no){
namesOfcl<-names(cl$membership[which(cl$membership==i)])
sub<-subset(bts, names(bts) %in%namesOfcl)
d<-distances(gAt,v=names(sub),to=names(sub))
for(j in 1:nrow(d)){
d[j,]<-sort(d[j,], decreasing = F)
}
if(class(d)=="matrix"){
b<-ncol(d)
d<-apply(d,2,sort,index.return=T)
print(d)
m<-c(m,names(d))}
else
m<-c(m,names(d))
}
m
d
d[1]
names(d[1])
cl<-clusters(gAt)
bts<-betweenness(gAt,directed = F)
m<-vector()
for(i in 1:cl$no){
namesOfcl<-names(cl$membership[which(cl$membership==i)])
sub<-subset(bts, names(bts) %in%namesOfcl)
d<-distances(gAt,v=names(sub),to=names(sub))
for(j in 1:nrow(d)){
d[j,]<-sort(d[j,], decreasing = F)
}
if(class(d)=="matrix"){
b<-ncol(d)
d<-apply(d,2,sort,index.return=T)
print(d)
m<-c(m,(d)[])}
else
m<-c(m,names(d[1]))
}
m
m
cl<-clusters(gAt)
bts<-betweenness(gAt,directed = F)
m<-vector()
for(i in 1:cl$no){
namesOfcl<-names(cl$membership[which(cl$membership==i)])
sub<-subset(bts, names(bts) %in%namesOfcl)
d<-distances(gAt,v=names(sub),to=names(sub))
for(j in 1:nrow(d)){
d[j,]<-sort(d[j,], decreasing = F)
}
if(class(d)=="matrix"){
b<-ncol(d)
d<-apply(d,2,sort,index.return=T)
print(d)
m<-c(m,names(d[1])}
else
m<-c(m,names(d[1]))
}
# bts_sub<-subset(bts, names(bts) %in% m)
# combinations<-combn(bts_sub,2,simplify = F)
#
#
# combinations
}
cl<-clusters(gAt)
bts<-betweenness(gAt,directed = F)
m<-vector()
for(i in 1:cl$no){
namesOfcl<-names(cl$membership[which(cl$membership==i)])
sub<-subset(bts, names(bts) %in%namesOfcl)
d<-distances(gAt,v=names(sub),to=names(sub))
for(j in 1:nrow(d)){
d[j,]<-sort(d[j,], decreasing = F)
}
if(class(d)=="matrix"){
b<-ncol(d)
d<-apply(d,2,sort,index.return=T)
print(d)
m<-c(m,names(d[1])}
else
m<-c(m,names(d[1]))
}
# bts_sub<-subset(bts, names(bts) %in% m)
# combinations<-combn(bts_sub,2,simplify = F)
#
#
# combinations
#cl<-clusters(g)
#bts<-betweenness(g,directed = F)
#combinations<-combn(bts,2,simplify = F)
#combinations
cl<-clusters(gAt)
bts<-betweenness(gAt,directed = F)
m<-vector()
for(i in 1:cl$no){
namesOfcl<-names(cl$membership[which(cl$membership==i)])
sub<-subset(bts, names(bts) %in%namesOfcl)
d<-distances(gAt,v=names(sub),to=names(sub))
for(j in 1:nrow(d)){
d[j,]<-sort(d[j,], decreasing = F)
}
if(class(d)=="matrix"){
b<-ncol(d)
d<-apply(d,2,sort,index.return=T)
print(d)
m<-c(m,names(d[1])}
else
m<-c(m,names(d[1]))
}
cl<-clusters(gAt)
bts<-betweenness(gAt,directed = F)
m<-vector()
for(i in 1:cl$no){
namesOfcl<-names(cl$membership[which(cl$membership==i)])
sub<-subset(bts, names(bts) %in%namesOfcl)
d<-distances(gAt,v=names(sub),to=names(sub))
for(j in 1:nrow(d)){
d[j,]<-sort(d[j,], decreasing = F)
}
if(class(d)=="matrix"){
d<-apply(d,2,sort,index.return=T)
print(d)
m<-c(m,names(d[1]))}
else
m<-c(m,names(d[1]))
}
m
w<-m
w
for(i in 1:cl$no){
namesOfcl<-names(cl$membership[which(cl$membership==i)])
sub<-subset(bts, names(bts) %in%namesOfcl)
d<-distances(gAt,v=names(sub),to=names(sub))
for(j in 1:nrow(d)){
d[j,]<-sort(d[j,], decreasing = F)
}
print(d)
if(class(d)=="matrix"){
d<-apply(d,2,sort,index.return=T)
#print(d)
m<-c(m,names(d[1]))}
else
m<-c(m,names(d[1]))
}
w
cl<-clusters(gAt)
bts<-betweenness(gAt,directed = F)
m<-vector()
for(i in 1:cl$no){
namesOfcl<-names(cl$membership[which(cl$membership==i)])
sub<-subset(bts, names(bts) %in%namesOfcl)
d<-distances(gAt,v=names(sub),to=names(sub))
for(j in 1:nrow(d)){
d[j,]<-sort(d[j,], decreasing = F)
}
print(d)
if(class(d)=="matrix"){
d<-apply(d,2,sort,index.return=T)
#print(d)
m<-c(m,names(d[1]))}
else
m<-c(m,names(d[1]))
}
m
cl<-clusters(gAt)
bts<-betweenness(gAt,directed = F)
m<-vector()
for(i in 1:cl$no){
namesOfcl<-names(cl$membership[which(cl$membership==i)])
sub<-subset(bts, names(bts) %in%namesOfcl)
d<-distances(gAt,v=names(sub),to=names(sub))
for(j in 1:nrow(d)){
d[j,]<-sort(d[j,], decreasing = F)
}
#print(d)
if(class(d)=="matrix"){
d<-apply(d,2,sort,index.return=T)
print(d)
m<-c(m,names(d[1]))}
else
m<-c(m,names(d[1]))
}
m
sort(c(1,2,3,1),index.return=T)
df<-data.frame()
df[1,1]<-1,3
df[1,]<-c(1,3)
df
df[1,1]<-1
df[1,2]<-3
df[2,1]<-0
df[2,2]<-2
df
df<-as.matrix(df)
df
apply(df,2,sort,index.return=T)
cl<-clusters(gAt)
bts<-betweenness(gAt,directed = F)
m<-vector()
for(i in 1:cl$no){
namesOfcl<-names(cl$membership[which(cl$membership==i)])
sub<-subset(bts, names(bts) %in%namesOfcl)
d<-distances(gAt,v=names(sub),to=names(sub))
for(j in 1:nrow(d)){
d[j,]<-sort(d[j,], decreasing = F)
}
#print(d)
if(class(d)=="matrix"){
d<-apply(d,2,sort,index.return=T)
d<-d[order(colnames(d)),drop=F]
print(d)
m<-c(m,names(d$ix[1]))}
else
m<-c(m,names(d[1]))
}
d
cl<-clusters(gAt)
bts<-betweenness(gAt,directed = F)
m<-vector()
for(i in 1:cl$no){
namesOfcl<-names(cl$membership[which(cl$membership==i)])
sub<-subset(bts, names(bts) %in%namesOfcl)
d<-distances(gAt,v=names(sub),to=names(sub))
for(j in 1:nrow(d)){
d[j,]<-sort(d[j,], decreasing = F)
}
#print(d)
if(class(d)=="matrix"){
#d<-apply(d,2,sort,index.return=T)
d<-d[order(colnames(d)),drop=F]
print(d)
m<-c(m,names(d$ix[1]))}
else
m<-c(m,names(d[1]))
}
# bts_sub<-subset(b
cl<-clusters(gAt)
bts<-betweenness(gAt,directed = F)
m<-vector()
for(i in 1:cl$no){
namesOfcl<-names(cl$membership[which(cl$membership==i)])
sub<-subset(bts, names(bts) %in%namesOfcl)
d<-distances(gAt,v=names(sub),to=names(sub))
for(j in 1:nrow(d)){
d[j,]<-sort(d[j,], decreasing = F)
}
#print(d)
if(class(d)=="matrix"){
#d<-apply(d,2,sort,index.return=T)
d<-d[order(colnames(d)),drop=F]
print(d)
m<-c(m,names(d[1]))}
else
m<-c(m,names(d[1]))
}
cl<-clusters(gAt)
bts<-betweenness(gAt,directed = F)
m<-vector()
for(i in 1:cl$no){
namesOfcl<-names(cl$membership[which(cl$membership==i)])
sub<-subset(bts, names(bts) %in%namesOfcl)
d<-distances(gAt,v=names(sub),to=names(sub))
for(j in 1:nrow(d)){
d[j,]<-sort(d[j,], decreasing = F)
}
#print(d)
if(class(d)=="matrix"){
#d<-apply(d,2,sort,index.return=T)
d<-d[order((d)),drop=F]
print(d)
m<-c(m,names(d[1]))}
else
m<-c(m,names(d[1]))
}
d
order(d)
d<-distances(gAt,v=names(sub),to=names(sub))
d
cl<-clusters(gAt)
bts<-betweenness(gAt,directed = F)
m<-vector()
for(i in 1:cl$no){
namesOfcl<-names(cl$membership[which(cl$membership==i)])
sub<-subset(bts, names(bts) %in%namesOfcl)
d<-distances(gAt,v=names(sub),to=names(sub))
for(j in 1:nrow(d)){
d[j,]<-sort(d[j,], decreasing = F)
}
#print(d)
if(class(d)=="matrix"){
print(d)
#d<-apply(d,2,sort,index.return=T)
d<-d[order((d)),drop=F]
#print(d)
m<-c(m,names(d[1]))}
else
m<-c(m,names(d[1]))
}
d
?min
d<-apply(d,2,min)
cl<-clusters(gAt)
bts<-betweenness(gAt,directed = F)
m<-vector()
for(i in 1:cl$no){
namesOfcl<-names(cl$membership[which(cl$membership==i)])
sub<-subset(bts, names(bts) %in%namesOfcl)
d<-distances(gAt,v=names(sub),to=names(sub))
for(j in 1:nrow(d)){
d[j,]<-sort(d[j,], decreasing = F)
}
#print(d)
if(class(d)=="matrix"){
#print(d)
d<-apply(d,2,min)
#print(d)
m<-c(m,names(d[1]))}
else
m<-c(m,names(d[1]))
}
m
cl<-clusters(gAt)
bts<-betweenness(gAt,directed = F)
m<-vector()
for(i in 1:cl$no){
namesOfcl<-names(cl$membership[which(cl$membership==i)])
sub<-subset(bts, names(bts) %in%namesOfcl)
d<-distances(gAt,v=names(sub),to=names(sub))
for(j in 1:nrow(d)){
d[j,]<-sort(d[j,], decreasing = F)
}
#print(d)
if(class(d)=="matrix"){
#print(d)
d<-apply(d,2,min)
print(d)
m<-c(m,names(d[1]))}
else
m<-c(m,names(d[1]))
}
cl<-clusters(gAt)
bts<-betweenness(gAt,directed = F)
m<-vector()
for(i in 1:cl$no){
namesOfcl<-names(cl$membership[which(cl$membership==i)])
sub<-subset(bts, names(bts) %in%namesOfcl)
d<-distances(gAt,v=names(sub),to=names(sub))
for(j in 1:nrow(d)){
d[j,]<-sort(d[j,], decreasing = F)
}
#print(d)
if(class(d)=="matrix"){
index<-1
for(j in 2:nrow(d)){
if (sum(d[index,]<d[j,])==0)
index<-j
}
m<-c(m,rownames(d)[index])
}
else
m<-c(m,names(d[1]))
}
d
cl<-clusters(gAt)
bts<-betweenness(gAt,directed = F)
m<-vector()
for(i in 1:cl$no){
namesOfcl<-names(cl$membership[which(cl$membership==i)])
sub<-subset(bts, names(bts) %in%namesOfcl)
d<-distances(gAt,v=names(sub),to=names(sub))
for(j in 1:nrow(d)){
d[j,]<-sort(d[j,], decreasing = F)
}
#print(d)
if(class(d)=="matrix"){
index<-1
for(j in 2:nrow(d)){
if (sum(d[index,]<d[j,])==0)
index<-j
}
m<-c(m,rownames(d)[index])
}
else
m<-c(m,rownames(d)[1])
}
j
cl<-clusters(gAt)
bts<-betweenness(gAt,directed = F)
m<-vector()
for(i in 1:cl$no){
namesOfcl<-names(cl$membership[which(cl$membership==i)])
sub<-subset(bts, names(bts) %in%namesOfcl)
d<-distances(gAt,v=names(sub),to=names(sub))
for(j in 1:nrow(d)){
d[j,]<-sort(d[j,], decreasing = F)
}
#print(d)
if(nrow(d)>1){
index<-1
for(j in 2:nrow(d)){
if (sum(d[index,]<d[j,])==0)
index<-j
}
m<-c(m,rownames(d)[index])
}
else
m<-c(m,rownames(d)[1])
}
m
cl<-clusters(gAt)
bts<-betweenness(gAt,directed = F)
m<-vector()
for(i in 1:cl$no){
namesOfcl<-names(cl$membership[which(cl$membership==i)])
sub<-subset(bts, names(bts) %in%namesOfcl)
d<-distances(gAt,v=names(sub),to=names(sub))
for(j in 1:nrow(d)){
d[j,]<-sort(d[j,], decreasing = F)
}
print(d)
if(nrow(d)>1){
index<-1
for(j in 2:nrow(d)){
if (sum(d[index,]<d[j,])==0)
index<-j
}
m<-c(m,rownames(d)[index])
}
else
m<-c(m,rownames(d)[1])
}
# bts_sub<-subset(bts, names(bts) %in% m)
# combinations<-combn(bts_sub,2,simplify = F)
#
#
# combinations
cl<-clusters(gAt)
bts<-betweenness(gAt,directed = F)
m<-vector()
for(i in 1:cl$no){
namesOfcl<-names(cl$membership[which(cl$membership==i)])
sub<-subset(bts, names(bts) %in%namesOfcl)
d<-distances(gAt,v=names(sub),to=names(sub))
for(j in 1:nrow(d)){
d[j,]<-sort(d[j,], decreasing = F)
}
print(d)
if(nrow(d)>1){
index<-1
for(j in 2:nrow(d)){
if (sum(d[index,]<d[j,])==0)
index<-j
}
m<-c(m,rownames(d)[index])
}
else
m<-c(m,rownames(d)[1])
}
# bts_sub<-subset(bts, names(bts) %in% m)
combinations<-combn(m,2,simplify = F)
#
#
combinations
m
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/estimateWithCloseness/test6_DA.R')
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/estimateWithCloseness/test6_DA.R')
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/estimateWithCloseness/test6_DA.R')
df
length(m)
length(combinations)
49*48/2
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/estimateWithCloseness/test6_DA.R')
combinations
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/estimateWithCloseness/test6_DA.R')
df
benefit
ecount(g)
ecount(g0)
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/estimateWithCloseness/test6_DA.R')
