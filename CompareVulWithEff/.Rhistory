n0<-15
maxNumberOfAttacks<-5
attackSeq<-seq(0,maxNumberOfAttacks,by=1)
set.seed(123)
g0 <- sample_pa(n0,directed = F)
V(g0)$name <-V(g0)
#gr<-erdos.renyi.game(n=n0,p.or.m = ecount(g0),type = "gnm")
#V(gr)$name <-V(gr)
lengthOption<-"FL"
algorithm<-"MV_AllCombs"
attackMethod<-"BA"
Linklimit<-20
limitSeq<-seq(10,50,by=5)
findAttack<-function(g,k){
if(k!=0){
a1<-vector()
z<-1
bts<-betweenness(g,directed = F)
od<-sort(unique(bts),decreasing = T)
a1<-names(subset(bts,bts==od[z]))
while(length(a1)<k){
z<-z+1
a1<-c(a1,names(subset(bts,bts==od[z])))
}
if(length(a1)>k){
a1<-a1[1:k]
}
a1
}
else
NA
}
graphAfterAttackWith<-function(g,at){
if(is.na(at[1]))
g
else{
gTemp<-delete.vertices(g,at)
gTemp2<-add.vertices(gTemp,length(at),name=at)
gTemp2
}
}
graphAfterAttackWithout<-function(g,at){
if(is.na(at[1]))
g
else{
gTemp<-delete.vertices(g,at)
gTemp
}
}
findEfficiency<-function(g,at){
gTemp<-graphAfterAttackWith(g,at)
dtr<-distance_table(gTemp,directed = F)$res
e<-2*sum(dtr*(1/(1:length(dtr))))/(vcount(gTemp)*(vcount(gTemp)-1))
e
}
findVulnerability<-function(g,at){
if(findEfficiency(g,NA)!=0)
(1-(findEfficiency(g,at)/findEfficiency(g,NA)))
else
0
}
getCombinations<-function(g){
cl<-clusters(g)
bts<-betweenness(g,directed = F)
combinations<-combn(bts,2,simplify = F)
combinations
# cl<-clusters(g)
# bts<-betweenness(g,directed = F)
# m<-vector()
#
#
#
# for(i in 1:cl$no){
#     namesOfcl<-names(cl$membership[which(cl$membership==i)])
#     sub<-subset(bts, names(bts) %in%namesOfcl)
#     m<-c(m,names(sub[which(sub==max(sub))])[1])
# }
# bts_sub<-subset(bts, names(bts) %in% m)
# combinations<-combn(bts_sub,2,simplify = F)
#
#
# combinations
}
findRobustness<-function(g){
vuls<-vector()
l<-vcount(g)
gTemp<-g
for(i in 1:(l-2)){
at<-findAttack(g,i)
vuls<-c(vuls,findVulnerability(g,at))
}
mean(vuls)
}
g0
plot(g0)
graphAfterAttackWith(g0,findAttack(g0,5))
plot(g0)
u<-10
vulAfter<-vector()
efAfter<-vector()
vulBefore<-vector()
efBefore<-vector()
linksAdded<-vector()
vulgr<-vector()
efgr<-vector()
g<-g0
##############
set.seed(123)
gr<-erdos.renyi.game(n=n0,p.or.m = (ecount(g0))+u,type = "gnm")
V(gr)$name <-V(gr)
t<-0
Flag<-1
k<-maxNumberOfAttacks
at0<-findAttack(g0,k)
vul0<-findVulnerability(g0,at0)
ef0<-findEfficiency(g0,at0)
vul<-vul0
ef<-ef0
while(t<u && Flag){
print(t)
at<-findAttack(g,k)
gAt<-graphAfterAttackWithout(g,at)
if(!is.connected(gAt)){
combinations<-getCombinations(gAt)
benefit<-sapply(combinations,function(x){
n<-names(x)
gTmp<-g+edge(n[1],n[2])
at<-findAttack(gTmp,k)
vull<-findVulnerability(gTmp,at)
vul0-vull
#eff<-findEfficiency(gTmp,at)
#eff-ef
})
if(length(which(benefit>0))==0){
print("flag1")
Flag<-0
}
else{
selectedCom<-combinations[[which(benefit==max(benefit))[1]]]
print(selectedCom)
n<-names(selectedCom)
g<-g+edge(n[1],n[2])
at<-findAttack(g,k)
vul<-findVulnerability(g,at)
ef<-findEfficiency(g,at)
print(ef)
print(max(benefit)+ef)
t<-t+1
}
}
else {
print("flag2")
Flag<-0
}
}
for(k in attackSeq){
at0<-findAttack(g0,k)
Vul0<-findVulnerability(g0,at0)
vulBefore<-c(vulBefore,findVulnerability(g0,at0))
efBefore<-c(efBefore,findEfficiency(g0,at0))
##################
atr<-findAttack(gr,k)
vulgr<-c(vulgr,findVulnerability(gr,atr))
efgr<-c(efgr,findEfficiency(gr,atr))
####################
at<-findAttack(g,k)
vulAfter<-c(vulAfter,findVulnerability(g,at))
efAfter<-c(efAfter,findEfficiency(g,at))
linksAdded<-c(linksAdded,t)
print(k)
}
plot(graphAfterAttackWith(g0,findAttack(g0,5)))
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/CompareVulWithEff/test6_BA.R')
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/CompareVulWithEff/test6_BA.R')
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/CompareVulWithEff/test6_BA.R')
plot(graphAfterAttackWith(g0,findAttack(g0,maxNumberOfAttacks)))
maxNumberOfAttacks
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/CompareVulWithEff/test6_BA.R')
maxNumberOfAttacks
plot(graphAfterAttackWith(g0,findAttack(g0,maxNumberOfAttacks)))
gtemp<-graphAfterAttackWith(g0,findAttack(g0,maxNumberOfAttacks))
bts(gtemp)
betweenness(gtemp)
degree(gtemp)
betweenness(g0)
betweenness(g)
betweenness(g,directed = F)
betweenness(g,directed = F,normalized = F)
plot(g)
betweenness(g,directed = F,normalized = F,nobigint = F)
betweenness(v(g),directed = F,normalized = F,nobigint = F)
betweenness(V(g),directed = F,normalized = F,nobigint = F)
betweenness(V(g),v=V(g),directed = F,normalized = F,nobigint = F)
betweenness(g,v=V(g),directed = F,normalized = F,nobigint = F)
sum(betweenness(g,v=V(g),directed = F,normalized = F,nobigint = F))
15*14/2
sum(betweenness(g0,v=V(g),directed = F,normalized = F,nobigint = F))
sum(betweenness(g0,v=V(g0),directed = F,normalized = F,nobigint = F))
vcount(g0)*(vcount(g0)-1)/2
cl<-clusters(g)
bts<-betweenness(g,directed = F)
cl$no
cl<-clusters(g0)
bts<-betweenness(g0,directed = F)
cl$no
clusters(gtemp)
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/CompareVulWithEff/test6_DA.R')
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/estimateWithCloseness/test6_DA.R')
m
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/estimateWithCloseness/test6_DA.R')
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/estimateWithCloseness/test6_DA.R')
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/estimateWithCloseness/test6_DA.R')
sum(F,F,F,F)
d
sum(c(0,1,1,1,2,3)>c())
sum(c(0,1,1,1,2,3)>c(0,1,1,2,3,3))
c(1,2)==c(1,2)
ibrary(igraph)
library(gridExtra)
library(ggplot2)
n0<-1000
maxNumberOfAttacks<-20
attackSeq<-seq(0,maxNumberOfAttacks,by=2)
set.seed(123)
g0 <- sample_pa(n0,directed = F)
V(g0)$name <-V(g0)
#gr<-erdos.renyi.game(n=n0,p.or.m = ecount(g0),type = "gnm")
#V(gr)$name <-V(gr)
lengthOption<-"FL"
algorithm<-"ME_AllCombs"
attackMethod<-"DA"
Linklimit<-20
findAttack<-function(g,k){
if(k!=0){
a1<-vector()
z<-1
dg<-degree(g)
od<-sort(unique(dg),decreasing = T)
a1<-names(subset(dg,dg==od[z]))
while(length(a1)<k){
z<-z+1
a1<-c(a1,names(subset(dg,dg==od[z])))
}
if(length(a1)>k)
a1<-a1[1:k]
a1
}
else
NA
}
graphAfterAttackWith<-function(g,at){
if(is.na(at[1]))
g
else{
gTemp<-delete.vertices(g,at)
gTemp2<-add.vertices(gTemp,length(at),name=at)
gTemp2
}
}
graphAfterAttackWithout<-function(g,at){
if(is.na(at[1]))
g
else{
gTemp<-delete.vertices(g,at)
gTemp
}
}
findEfficiency<-function(g,at){
gTemp<-graphAfterAttackWith(g,at)
dtr<-distance_table(gTemp,directed = F)$res
e<-2*sum(dtr*(1/(1:length(dtr))))/(vcount(gTemp)*(vcount(gTemp)-1))
e
}
findVulnerability<-function(g,at){
if(findEfficiency(g,NA)!=0)
(1-(findEfficiency(g,at)/findEfficiency(g,NA)))
else
0
}
getCombinations<-function(g){
# cl<-clusters(g)
# bts<-betweenness(g,directed = F)
# combinations<-combn(bts,2,simplify = F)
# combinations
#########################################
d<-degree(g)
sub<-subset(d, d>5)
combinations<-combn(names(sub),2,simplify = F)
combinations
#######################################
#
# cl<-clusters(g)
# bts<-betweenness(g,directed = F)
# m<-vector()
#
#
#
# for(i in 1:cl$no){
#     namesOfcl<-names(cl$membership[which(cl$membership==i)])
#     sub<-subset(bts, names(bts) %in%namesOfcl & bts!=0 )
#     m<-c(m,names(sub[which(sub==max(sub))])[1])
# }
# bts_sub<-subset(bts, names(bts) %in% m)
# combinations<-combn(bts_sub,2,simplify = F)
#
#
# combinations
#
# cl<-clusters(g)
# vs<-names(V(g))
# m<-vector()
# clo<-findCloseness(g)
# for(i in 1:cl$no){
#     namesOfcl<-names(cl$membership[which(cl$membership==i)])
#     sub1<-subset(vs, vs %in%namesOfcl)
#     sub2<-clo[which(names(clo) %in%sub1)]
#     m<-c(m,names(sub2[which(sub2==max(sub2))])[1])
# }
# combinations<-combn(m,2,simplify = F)
# combinations
}
g<-g0
library(igraph)
library(gridExtra)
library(ggplot2)
n0<-1000
maxNumberOfAttacks<-20
attackSeq<-seq(0,maxNumberOfAttacks,by=2)
set.seed(123)
g0 <- sample_pa(n0,directed = F)
V(g0)$name <-V(g0)
g<-g0
at<-findAttack(g,k)
gAt<-graphAfterAttackWithout(g,at)
k<-2
at<-findAttack(g,k)
gAt<-graphAfterAttackWithout(g,at)
cluster_leading_eigen(gAt)
plot(gAt)
n0<-10
set.seed(123)
g0 <- sample_pa(n0,directed = F)
V(g0)$name <-V(g0)
g<-g0
plot(g)
at<-findAttack(g,k)
gAt<-graphAfterAttackWithout(g,at)
plot(gAt)
cluster_leading_eigen(gAt)
findAttack<-function(g,k){
if(k!=0){
a1<-vector()
gtmp<-g
for(i in 1:k){
dg<-degree(gtmp)
at<-names(max(dg))[1]
ai<-c(ai,at)
gtmp<-delete.vertices(gtmp,at)
}
# a1<-vector()
# z<-1
# dg<-degree(g)
# od<-sort(unique(dg),decreasing = T)
# a1<-names(subset(dg,dg==od[z]))
#
# while(length(a1)<k){
#     z<-z+1
#     a1<-c(a1,names(subset(dg,dg==od[z])))
# }
#
# if(length(a1)>k)
#     a1<-a1[1:k]
#
# a1
}
else
NA
}
g
plot(g)
findAttack(g,1)
#####################functions
findAttack<-function(g,k){
if(k!=0){
a1<-vector()
gtmp<-g
for(i in 1:k){
dg<-degree(gtmp)
at<-names(max(dg))[1]
a1<-c(a1,at)
gtmp<-delete.vertices(gtmp,at)
}
# a1<-vector()
# z<-1
# dg<-degree(g)
# od<-sort(unique(dg),decreasing = T)
# a1<-names(subset(dg,dg==od[z]))
#
# while(length(a1)<k){
#     z<-z+1
#     a1<-c(a1,names(subset(dg,dg==od[z])))
# }
#
# if(length(a1)>k)
#     a1<-a1[1:k]
#
# a1
}
else
NA
}
findAttack(g,1)
findAttack<-function(g,k){
if(k!=0){
a1<-vector()
gtmp<-g
for(i in 1:k){
dg<-degree(gtmp)
at<-names(max(dg))[1]
a1<-c(a1,at)
gtmp<-delete.vertices(gtmp,at)
}
a1
# a1<-vector()
# z<-1
# dg<-degree(g)
# od<-sort(unique(dg),decreasing = T)
# a1<-names(subset(dg,dg==od[z]))
#
# while(length(a1)<k){
#     z<-z+1
#     a1<-c(a1,names(subset(dg,dg==od[z])))
# }
#
# if(length(a1)>k)
#     a1<-a1[1:k]
#
# a1
}
else
NA
}
findAttack(g,1)
findAttack<-function(g,k){
if(k!=0){
a1<-vector()
gtmp<-g
for(i in 1:k){
dg<-degree(gtmp)
at<-names(max(dg))[1]
print(at)
a1<-c(a1,at)
gtmp<-delete.vertices(gtmp,at)
}
a1
# a1<-vector()
# z<-1
# dg<-degree(g)
# od<-sort(unique(dg),decreasing = T)
# a1<-names(subset(dg,dg==od[z]))
#
# while(length(a1)<k){
#     z<-z+1
#     a1<-c(a1,names(subset(dg,dg==od[z])))
# }
#
# if(length(a1)>k)
#     a1<-a1[1:k]
#
# a1
}
else
NA
}
findAttack(g,1)
degree(g)
max(degree(g))
findAttack<-function(g,k){
if(k!=0){
a1<-vector()
gtmp<-g
for(i in 1:k){
dg<-degree(gtmp)
at<-names(dg[which(dg==max(dg))])[1]
print(at)
a1<-c(a1,at)
gtmp<-delete.vertices(gtmp,at)
}
a1
# a1<-vector()
# z<-1
# dg<-degree(g)
# od<-sort(unique(dg),decreasing = T)
# a1<-names(subset(dg,dg==od[z]))
#
# while(length(a1)<k){
#     z<-z+1
#     a1<-c(a1,names(subset(dg,dg==od[z])))
# }
#
# if(length(a1)>k)
#     a1<-a1[1:k]
#
# a1
}
else
NA
}
findAttack(g,1)
findAttack(g,2)
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/CleanResults/CompareWithOriginalAndRandomGraphs/Dynamic Attack/AttackVsEfficiency_DegreeAttack.R')
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/CleanResults/CompareWithOriginalAndRandomGraphs/Dynamic Attack/AttackVsEfficiency_DegreeAttack.R')
