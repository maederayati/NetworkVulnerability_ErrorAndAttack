cl<-clusters(g)
bts<-betweenness(g,directed = F)
m<-vector()
for(i in 1:cl$no){
namesOfcl<-names(cl$membership[which(cl$membership==i)])
sub<-subset(bts, names(bts) %in%namesOfcl)
m<-c(m,names(sub[which(sub==max(sub))])[1])
}
bts_sub<-subset(bts, names(bts) %in% m)
combinations<-combn(bts_sub,2,simplify = F)
}
###################################
t<-0
vulAfter<-vector()
efAfter<-vector()
vulBefore<-vector()
efBefore<-vector()
for(k in 1:numberOfAttacks){
at0<-findAttack(g0,k)
gAt0<-delete.vertices(g0,at0)
Vul0<-findVulnerability(g0,at0)
efAtAfter0<-findEfficiency(gAt0)
vulBefore<-c(vulBefore,findVulnerability(g0,at0))
efBefore<-c(efBefore,findEfficiency(gAt0))
gAt<-gAt0
g<-g0
Vul<-Vul0
efAtAfter<-findEfficiency(gAt)
Flag<-1
gAtAfter<-gAt
while(Flag){
t<-t+1
#print(t)
if(is.connected(gAt))
Flag<-0
else{
combinations<-getCombinations(gAt)
comFlag<-sapply(combinations,function(x){
n<-names(x)
gTmp<-g+edge(n[1],n[2])
at<-findAttack(gTmp,k)
if(findVulnerability(gTmp,at)>Vul0)
F
else
T
})
if(sum(comFlag)>0){
newCom<-combinations[comFlag]
benefit<-sapply(newCom,function(x){
n<-names(x)
gTmp<-g+edge(n[1],n[2])
at<-findAttack(gTmp,k)
gTmp2<-delete.vertices(gTmp,At)
findEfficiency(gTmp2)-efAtAfter
})
if(sum(benefit)<=0)
Flag<-0
else{
selectedCom<-newCom[[which(benefit==max(benefit))[1]]]
n<-names(selectedCom)
g<-g+edge(n[1],n[2])
At<-findAttack(g,k)
gAt<-delete.vertices(g,At)
efAtAfter<-findEfficiency(gAt)
}
}
else
Flag<-0
}
}
vulAfter<-c(vulAfter,findVulnerability(g,At))
efAfter<-c(efAfter,findEfficiency(g))
print(k)
}
df<-cbind(1:4,efAfter,efBefore,vulAfter,vulBefore)
df
efBefore
efAfter
vulBefore
df[-5,]
df<-df[-5,]
df
df<-cbind(1:4,efAfter,efBefore,vulAfter,vulBefore)
names(df)<-c("numberOfAttacks","efAfter","efBefore","vulAfter","vulBefore")
df<-df[-5,]
names(df)<-c("numberOfAttacks","efAfter","efBefore","vulAfter","vulBefore")
df
df<-cbind.data.frame(1:4,efAfter[1:4],efBefore[1:4],vulAfter[1:4],vulBefore[1:4])
names(df)<-c("numberOfAttacks","efAfter","efBefore","vulAfter","vulBefore")
######vulGraph
df
vulPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = vulAfter), colour="blue") +
geom_line(aes(y = vulBefore), colour = "red") +
ylab(label="Vulnerability") +
xlab("Number of Attacks")
efPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = efAfter), colour="blue") +
geom_line(aes(y = efBefore), colour = "red") +
ylab(label="Efficiency") +
xlab("Number of Attacks")
png("result.png")
multiplot(vulPlot, efPlot, cols=2)
dev.off()
png("result.png")
print(multiplot(vulPlot, efPlot, cols=2))
dev.off()
library(ggplot2)
vulPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = vulAfter), colour="blue") +
geom_line(aes(y = vulBefore), colour = "red") +
ylab(label="Vulnerability") +
xlab("Number of Attacks")
vulPlot
efplot
efPlot
efPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = efAfter), colour="blue") +
geom_line(aes(y = efBefore), colour = "red") +
ylab(label="Efficiency") +
xlab("Number of Attacks")
efPlot
png("result.png")
print(multiplot(vulPlot, efPlot, cols=2))
dev.off()
multiplot(efPlot, vulPlot)
#> `geom_smooth()` using method = 'loess'
png("result.png")
print(vulPlot)
dev.off()
vulPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = vulAfter), colour="blue") +
geom_line(aes(y = vulBefore), colour = "red") +
ylab(label="Vulnerability") +
xlab("Number of Attacks")+scale_colour_manual(values=c("Vulnerability Before", "Vulnerability After"))
print(vulPlot)
vulPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = vulAfter), colour="blue") +
geom_line(aes(y = vulBefore), colour = "red") +
ylab(label="Vulnerability") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("blue", "red"))
vulPlot
vulPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = vulAfter), colour="1") +
geom_line(aes(y = vulBefore), colour = "2") +
ylab(label="Vulnerability") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("blue", "red"))
vulPlot
vulPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = vulAfter, colour="1")) +
geom_line(aes(y = vulBefore, colour = "2")) +
ylab(label="Vulnerability") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("blue", "red"))
vulPlot
vulPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = vulAfter, colour="After Adding Wires")) +
geom_line(aes(y = vulBefore, colour = "Befor Adding Wires")) +
ylab(label="Vulnerability") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("blue", "red"))
vulPlot
vulPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = vulAfter, colour="After Adding Wires")) +
geom_line(aes(y = vulBefore, colour = "Before Adding Wires")) +
ylab(label="Vulnerability") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("blue", "red"))
efPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = efAfter, colour="After Adding Wires")) +
geom_line(aes(y = efBefore, colour = "Before Adding Wires")) +
ylab(label="Efficiency") +
xlab("Number of Attacks")
png("result.png")
print(vulPlot)
print(efPlot)
dev.off()
png("resultEf.png")
print(efPlot)
dev.off()
png("resultVul.png")
print(efPlot)
dev.off()
library(igraph)
#g <- make_ring(10)
n0<-100
numberOfAttacks<-10
set.seed(123)
g0 <- sample_pa(n0,directed = F)
V(g0)$name <- V(g0)
dtr<-distance_table(g0,directed = F)$res
Eglob0<-sum(dtr*(1/(1:length(dtr))))/(n0*(n0-1))
Eglob<-Eglob0
Vulnerability<-0
findAttack<-function(g,k){
a1<-vector()
z<-1
od<-sort(unique(degree(g)),decreasing = T)
a1<-which(degree(g)==od[z])
while(length(a1)<k){
z<-z+1
a1<-c(a1,which(degree(g)==od[z]))
}
if(length(a1)>k){
a1<-a1[1:k]
}
a1
}
findEfficiency<-function(g){
dtr<-distance_table(g,directed = F)$res
e<-sum(dtr*(1/(1:length(dtr))))/((vcount(g)-k)*(vcount(g)-k-1))
e
}
findVulnerability<-function(g,at){
g2<-delete.vertices(g,at)
(1-(findEfficiency(g2)/findEfficiency(g)))
}
getCombinations<-function(g){
cl<-clusters(g)
bts<-betweenness(g,directed = F)
m<-vector()
for(i in 1:cl$no){
namesOfcl<-names(cl$membership[which(cl$membership==i)])
sub<-subset(bts, names(bts) %in%namesOfcl)
m<-c(m,names(sub[which(sub==max(sub))])[1])
}
bts_sub<-subset(bts, names(bts) %in% m)
combinations<-combn(bts_sub,2,simplify = F)
}
###################################
t<-0
vulAfter<-vector()
efAfter<-vector()
vulBefore<-vector()
efBefore<-vector()
for(k in 1:numberOfAttacks){
at0<-findAttack(g0,k)
gAt0<-delete.vertices(g0,at0)
Vul0<-findVulnerability(g0,at0)
efAtAfter0<-findEfficiency(gAt0)
vulBefore<-c(vulBefore,findVulnerability(g0,at0))
efBefore<-c(efBefore,findEfficiency(gAt0))
gAt<-gAt0
g<-g0
Vul<-Vul0
efAtAfter<-findEfficiency(gAt)
Flag<-1
gAtAfter<-gAt
while(Flag){
t<-t+1
#print(t)
if(is.connected(gAt))
Flag<-0
else{
combinations<-getCombinations(gAt)
comFlag<-sapply(combinations,function(x){
n<-names(x)
gTmp<-g+edge(n[1],n[2])
at<-findAttack(gTmp,k)
if(findVulnerability(gTmp,at)>Vul0)
F
else
T
})
if(sum(comFlag)>0){
newCom<-combinations[comFlag]
benefit<-sapply(newCom,function(x){
n<-names(x)
gTmp<-g+edge(n[1],n[2])
at<-findAttack(gTmp,k)
gTmp2<-delete.vertices(gTmp,At)
findEfficiency(gTmp2)-efAtAfter
})
if(sum(benefit)<=0)
Flag<-0
else{
selectedCom<-newCom[[which(benefit==max(benefit))[1]]]
n<-names(selectedCom)
g<-g+edge(n[1],n[2])
At<-findAttack(g,k)
gAt<-delete.vertices(g,At)
efAtAfter<-findEfficiency(gAt)
}
}
else
Flag<-0
}
}
vulAfter<-c(vulAfter,findVulnerability(g,At))
efAfter<-c(efAfter,findEfficiency(g))
print(k)
}
png("resultVul.png")
print(vulPlot)
dev.off()
n0<-1000
numberOfAttacks<-5
set.seed(123)
g0 <- sample_pa(n0,directed = F)
V(g0)$name <- V(g0)
dtr<-distance_table(g0,directed = F)$res
Eglob0<-sum(dtr*(1/(1:length(dtr))))/(n0*(n0-1))
Eglob<-Eglob0
Vulnerability<-0
findAttack<-function(g,k){
a1<-vector()
z<-1
od<-sort(unique(degree(g)),decreasing = T)
a1<-which(degree(g)==od[z])
while(length(a1)<k){
z<-z+1
a1<-c(a1,which(degree(g)==od[z]))
}
if(length(a1)>k){
a1<-a1[1:k]
}
a1
}
findEfficiency<-function(g){
dtr<-distance_table(g,directed = F)$res
e<-sum(dtr*(1/(1:length(dtr))))/((vcount(g)-k)*(vcount(g)-k-1))
e
}
findVulnerability<-function(g,at){
g2<-delete.vertices(g,at)
(1-(findEfficiency(g2)/findEfficiency(g)))
}
getCombinations<-function(g){
cl<-clusters(g)
bts<-betweenness(g,directed = F)
m<-vector()
for(i in 1:cl$no){
namesOfcl<-names(cl$membership[which(cl$membership==i)])
sub<-subset(bts, names(bts) %in%namesOfcl)
m<-c(m,names(sub[which(sub==max(sub))])[1])
}
bts_sub<-subset(bts, names(bts) %in% m)
combinations<-combn(bts_sub,2,simplify = F)
}
###################################
t<-0
vulAfter<-vector()
efAfter<-vector()
vulBefore<-vector()
efBefore<-vector()
for(k in 1:numberOfAttacks){
at0<-findAttack(g0,k)
gAt0<-delete.vertices(g0,at0)
Vul0<-findVulnerability(g0,at0)
efAtAfter0<-findEfficiency(gAt0)
vulBefore<-c(vulBefore,findVulnerability(g0,at0))
efBefore<-c(efBefore,findEfficiency(gAt0))
gAt<-gAt0
g<-g0
Vul<-Vul0
efAtAfter<-findEfficiency(gAt)
Flag<-1
gAtAfter<-gAt
while(Flag){
t<-t+1
#print(t)
if(is.connected(gAt))
Flag<-0
else{
combinations<-getCombinations(gAt)
comFlag<-sapply(combinations,function(x){
n<-names(x)
gTmp<-g+edge(n[1],n[2])
at<-findAttack(gTmp,k)
if(findVulnerability(gTmp,at)>Vul0)
F
else
T
})
if(sum(comFlag)>0){
newCom<-combinations[comFlag]
benefit<-sapply(newCom,function(x){
n<-names(x)
gTmp<-g+edge(n[1],n[2])
at<-findAttack(gTmp,k)
gTmp2<-delete.vertices(gTmp,At)
findEfficiency(gTmp2)-efAtAfter
})
if(sum(benefit)<=0)
Flag<-0
else{
selectedCom<-newCom[[which(benefit==max(benefit))[1]]]
n<-names(selectedCom)
g<-g+edge(n[1],n[2])
At<-findAttack(g,k)
gAt<-delete.vertices(g,At)
efAtAfter<-findEfficiency(gAt)
}
}
else
Flag<-0
}
}
vulAfter<-c(vulAfter,findVulnerability(g,At))
efAfter<-c(efAfter,findEfficiency(g))
print(k)
}
#g <- make_ring(10)
n0<-1000
numberOfAttacks<-5
set.seed(123)
g0 <- sample_pa(n0,directed = F)
V(g0)$name <- V(g0)
dtr<-distance_table(g0,directed = F)$res
Eglob0<-sum(dtr*(1/(1:length(dtr))))/(n0*(n0-1))
Eglob<-Eglob0
Vulnerability<-0
findAttack<-function(g,k){
a1<-vector()
z<-1
od<-sort(unique(degree(g)),decreasing = T)
a1<-which(degree(g)==od[z])
while(length(a1)<k){
z<-z+1
a1<-c(a1,which(degree(g)==od[z]))
}
if(length(a1)>k){
a1<-a1[1:k]
}
a1
}
findEfficiency<-function(g){
dtr<-distance_table(g,directed = F)$res
e<-sum(dtr*(1/(1:length(dtr))))/((vcount(g)-k)*(vcount(g)-k-1))
e
}
findVulnerability<-function(g,at){
g2<-delete.vertices(g,at)
(1-(findEfficiency(g2)/findEfficiency(g)))
}
getCombinations<-function(g){
cl<-clusters(g)
bts<-betweenness(g,directed = F)
m<-vector()
for(i in 1:cl$no){
namesOfcl<-names(cl$membership[which(cl$membership==i)])
sub<-subset(bts, names(bts) %in%namesOfcl)
m<-c(m,names(sub[which(sub==max(sub))])[1])
}
bts_sub<-subset(bts, names(bts) %in% m)
combinations<-combn(bts_sub,2,simplify = F)
}
###################################
t<-0
vulAfter<-vector()
efAfter<-vector()
vulBefore<-vector()
efBefore<-vector()
for(k in 1:numberOfAttacks){
at0<-findAttack(g0,k)
gAt0<-delete.vertices(g0,at0)
Vul0<-findVulnerability(g0,at0)
efAtAfter0<-findEfficiency(gAt0)
vulBefore<-c(vulBefore,findVulnerability(g0,at0))
efBefore<-c(efBefore,findEfficiency(gAt0))
gAt<-gAt0
g<-g0
Vul<-Vul0
efAtAfter<-findEfficiency(gAt)
Flag<-1
gAtAfter<-gAt
while(Flag){
t<-t+1
print(t)
if(is.connected(gAt))
Flag<-0
else{
combinations<-getCombinations(gAt)
comFlag<-sapply(combinations,function(x){
n<-names(x)
gTmp<-g+edge(n[1],n[2])
at<-findAttack(gTmp,k)
if(findVulnerability(gTmp,at)>Vul0)
F
else
T
})
if(sum(comFlag)>0){
newCom<-combinations[comFlag]
benefit<-sapply(newCom,function(x){
n<-names(x)
gTmp<-g+edge(n[1],n[2])
at<-findAttack(gTmp,k)
gTmp2<-delete.vertices(gTmp,At)
findEfficiency(gTmp2)-efAtAfter
})
if(sum(benefit)<=0)
Flag<-0
else{
selectedCom<-newCom[[which(benefit==max(benefit))[1]]]
n<-names(selectedCom)
g<-g+edge(n[1],n[2])
At<-findAttack(g,k)
gAt<-delete.vertices(g,At)
efAtAfter<-findEfficiency(gAt)
}
}
else
Flag<-0
}
}
vulAfter<-c(vulAfter,findVulnerability(g,At))
efAfter<-c(efAfter,findEfficiency(g))
print(k)
}
