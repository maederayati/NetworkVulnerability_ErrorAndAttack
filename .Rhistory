vul1<-c(vul1, (gbefore-gafter)/gbefore)
}
df<-cbind.data.frame(1:j,vul1)
vul2<-vector()
ef2<-vector()
for(i in 0:j){
at1<-findAttack(g,i)
at2<-findAttack(g,i+1)
gafter<-findEfficiency(graphAfterAttack(g,at2))
ef2<-c(ef2, gbefore)
gbefore<-findEfficiency(graphAfterAttack(g,at1))
vul2<-c(vul2, (gbefore-gafter)/gbefore)
}
df<-cbind.data.frame(0:j,vul1,vul2,ef1,ef2)
names(df)<-c("numberOfAttacks","g0","g","ef0","ef")
vulPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = g0, colour="before Add")) +
geom_line(aes(y = g, colour = "after Add")) +
ylab(label="Vulnerability") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("red", "blue"))+
scale_x_continuous(breaks=0:j)
efPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = ef0, colour="before Add")) +
geom_line(aes(y = ef, colour = "after Add")) +
ylab(label="efficiency") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("red", "blue"))+
scale_x_continuous(breaks=0:j)
efPlot
vul1
vul2
ef1
ef2
findEfficiency(g0)
findEfficiency(g)
i<-0
at1<-findAttack(g,i)
at1
at1<-findAttack(g0,i)
at1
findEfficiency(graphAfterAttack(g0,at1))
findEfficiency(graphAfterAttack(g,at1))
j<-19
vul1<-vector()
ef1<-vector()
for(i in 0:j){
at1<-findAttack(g0,i)
at2<-findAttack(g0,i+1)
gafter<-findEfficiency(graphAfterAttack(g0,at2))
gbefore<-findEfficiency(graphAfterAttack(g0,at1))
ef1<-c(ef1, gbefore)
vul1<-c(vul1, (gbefore-gafter)/gbefore)
}
df<-cbind.data.frame(1:j,vul1)
vul2<-vector()
ef2<-vector()
for(i in 0:j){
at1<-findAttack(g,i)
at2<-findAttack(g,i+1)
gafter<-findEfficiency(graphAfterAttack(g,at2))
ef2<-c(ef2, gbefore)
gbefore<-findEfficiency(graphAfterAttack(g,at1))
vul2<-c(vul2, (gbefore-gafter)/gbefore)
}
df<-cbind.data.frame(0:j,vul1,vul2,ef1,ef2)
names(df)<-c("numberOfAttacks","g0","g","ef0","ef")
vulPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = g0, colour="before Add")) +
geom_line(aes(y = g, colour = "after Add")) +
ylab(label="Vulnerability") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("red", "blue"))+
scale_x_continuous(breaks=0:j)
efPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = ef0, colour="before Add")) +
geom_line(aes(y = ef, colour = "after Add")) +
ylab(label="efficiency") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("red", "blue"))+
scale_x_continuous(breaks=0:j)
efPlot
df
j<-19
vul1<-vector()
ef1<-vector()
for(i in 0:j){
at1<-findAttack(g0,i)
at2<-findAttack(g0,i+1)
gafter<-findEfficiency(graphAfterAttack(g0,at2))
gbefore<-findEfficiency(graphAfterAttack(g0,at1))
ef1<-c(ef1, gbefore)
vul1<-c(vul1, (gbefore-gafter)/gbefore)
}
df<-cbind.data.frame(1:j,vul1)
vul2<-vector()
ef2<-vector()
for(i in 0:j){
at1<-findAttack(g,i)
at2<-findAttack(g,i+1)
gafter<-findEfficiency(graphAfterAttack(g,at2))
gbefore<-findEfficiency(graphAfterAttack(g,at1))
ef2<-c(ef2, gbefore)
vul2<-c(vul2, (gbefore-gafter)/gbefore)
}
df<-cbind.data.frame(0:j,vul1,vul2,ef1,ef2)
names(df)<-c("numberOfAttacks","g0","g","ef0","ef")
vulPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = g0, colour="before Add")) +
geom_line(aes(y = g, colour = "after Add")) +
ylab(label="Vulnerability") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("red", "blue"))+
scale_x_continuous(breaks=0:j)
efPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = ef0, colour="before Add")) +
geom_line(aes(y = ef, colour = "after Add")) +
ylab(label="efficiency") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("red", "blue"))+
scale_x_continuous(breaks=0:j)
efPlot
library(igraph)
library(gridExtra)
library(ggplot2)
n0<-100
maxNumberOfAttacks<-10
attackSeq<-seq(0,maxNumberOfAttacks,by=2)
set.seed(123)
g0 <- sample_pa(n0,directed = F)
V(g0)$name <-V(g0)
#gr<-erdos.renyi.game(n=n0,p.or.m = ecount(g0),type = "gnm")
#V(gr)$name <-V(gr)
lengthOption<-"FL"
algorithm<-"MV"
attackMethod<-"BA"
Linklimit<-20
findAttack<-function(g,k){
if(k!=0){
a1<-vector()
z<-1
bts<-betweenness(g,directed = F)
od<-sort(unique(bts),decreasing = T)
a1<-names(subset(bts,bts==od[z]))
while(length(a1)<k){
z<-z+1
a1<-c(a1,names(subset(bts,bts==od[z])))
}
if(length(a1)>k){
a1<-a1[1:k]
}
a1
}
else
NA
}
findEfficiency<-function(g){
dtr<-distance_table(g,directed = F)$res
e<-2*sum(dtr*(1/(1:length(dtr))))/(vcount(g)*(vcount(g)-1))
e
}
findVulnerability<-function(g,at){
if(is.na(at))
0
else{
g2<-delete.vertices(g,at)
(1-(findEfficiency(g2)/findEfficiency(g)))
}
}
getCombinations<-function(g){
cl<-clusters(g)
bts<-betweenness(g,directed = F)
m<-vector()
for(i in 1:cl$no){
namesOfcl<-names(cl$membership[which(cl$membership==i)])
sub<-subset(bts, names(bts) %in%namesOfcl)
m<-c(m,names(sub[which(sub==max(sub))])[1])
}
bts_sub<-subset(bts, names(bts) %in% m)
combinations<-combn(bts_sub,2,simplify = F)
a<-sapply(combinations,sum)
combinations[order(-a)]
}
graphAfterAttack<-function(g,at){
if(is.na(at[1]))
g
else
delete.vertices(g,at)
}
###################################
vulAfter<-vector()
efAfter<-vector()
vulBefore<-vector()
efBefore<-vector()
linksAdded<-vector()
vulgr<-vector()
efgr<-vector()
for(k in attackSeq){
at0<-findAttack(g0,k)
gAt0<-graphAfterAttack(g0,at0)
Vul0<-findVulnerability(g0,at0)
efAt0<-findEfficiency(gAt0)
vulBefore<-c(vulBefore,findVulnerability(g0,at0))
efBefore<-c(efBefore,findEfficiency(gAt0))
#atr<-findAttack(gr,k)
#gAtr<-graphAfterAttack(gr,atr)
#vulgr<-c(vulgr,findVulnerability(gr,atr))
#efgr<-c(efgr,findEfficiency(gAtr))
gAt<-gAt0
g<-g0
Vul<-Vul0
efAt<-efAt0
t<-0
Flag<-1
while(t<Linklimit){
t<-t+1
print(t)
at<-findAttack(g,k)
gAt<-graphAfterAttack(g,at)
combinations<-getCombinations(gAt)
benefit<-sapply(combinations,function(x){
n<-names(x)
gTmp<-g+edge(n[1],n[2])
at<-findAttack(gTmp,k)
Vul-findVulnerability(gTmp,at)
})
selectedCom<-combinations[[which(benefit==max(benefit))[1]]]
n<-names(selectedCom)
g<-g+edge(n[1],n[2])
at<-findAttack(g,k)
Vul<-findVulnerability(g,at)
gAt<-graphAfterAttack(g,at)
efAt<-findEfficiency(gAt)
}
##############
set.seed(123)
gr<-erdos.renyi.game(n=n0,p.or.m = ecount(g),type = "gnm")
V(gr)$name <-V(gr)
atr<-findAttack(gr,k)
gAtr<-graphAfterAttack(gr,atr)
vulgr<-c(vulgr,findVulnerability(gr,atr))
efgr<-c(efgr,findEfficiency(gAtr))
####################
vulAfter<-c(vulAfter,Vul)
efAfter<-c(efAfter,efAt)
linksAdded<-c(linksAdded,t)
print(k)
}
getCombinations(gAt)
length(getCombinations(gAt))
t
k
vcount(gAt)
vcount(g0)
is.connected(g0)
is.connected(gAt)
cl<-clusters(g)
bts<-betweenness(g,directed = F)
m<-vector()
for(i in 1:cl$no){
namesOfcl<-names(cl$membership[which(cl$membership==i)])
sub<-subset(bts, names(bts) %in%namesOfcl)
m<-c(m,names(sub[which(sub==max(sub))])[1])
}
m
bts_sub<-subset(bts, names(bts) %in% m)
bts_sub
combn(bts_sub,2,simplify = F)
bts_sub
combn(1:2,2,simplify = F)
m
bts
bts<-sort(betweenness(g,directed = F),decreasing = T)
bts
getCombinations<-function(g){
cl<-clusters(g)
bts<-sort(betweenness(g,directed = F),decreasing = T)
combinations<-list()
for(i in 1:(length(bts)-1)){
combinations[[i]]<-c(bts[i],bts[i+1])
}
combinations
}
library(igraph)
library(gridExtra)
library(ggplot2)
n0<-100
maxNumberOfAttacks<-10
attackSeq<-seq(0,maxNumberOfAttacks,by=2)
set.seed(123)
g0 <- sample_pa(n0,directed = F)
V(g0)$name <-V(g0)
#gr<-erdos.renyi.game(n=n0,p.or.m = ecount(g0),type = "gnm")
#V(gr)$name <-V(gr)
lengthOption<-"FL"
algorithm<-"MV"
attackMethod<-"BA"
Linklimit<-20
findAttack<-function(g,k){
if(k!=0){
a1<-vector()
z<-1
bts<-betweenness(g,directed = F)
od<-sort(unique(bts),decreasing = T)
a1<-names(subset(bts,bts==od[z]))
while(length(a1)<k){
z<-z+1
a1<-c(a1,names(subset(bts,bts==od[z])))
}
if(length(a1)>k){
a1<-a1[1:k]
}
a1
}
else
NA
}
findEfficiency<-function(g){
dtr<-distance_table(g,directed = F)$res
e<-2*sum(dtr*(1/(1:length(dtr))))/(vcount(g)*(vcount(g)-1))
e
}
findVulnerability<-function(g,at){
if(is.na(at))
0
else{
g2<-delete.vertices(g,at)
(1-(findEfficiency(g2)/findEfficiency(g)))
}
}
getCombinations<-function(g){
cl<-clusters(g)
bts<-sort(betweenness(g,directed = F),decreasing = T)
combinations<-list()
for(i in 1:(length(bts)-1)){
combinations[[i]]<-c(bts[i],bts[i+1])
}
combinations
}
graphAfterAttack<-function(g,at){
if(is.na(at[1]))
g
else
delete.vertices(g,at)
}
###################################
vulAfter<-vector()
efAfter<-vector()
vulBefore<-vector()
efBefore<-vector()
linksAdded<-vector()
vulgr<-vector()
efgr<-vector()
for(k in attackSeq){
at0<-findAttack(g0,k)
gAt0<-graphAfterAttack(g0,at0)
Vul0<-findVulnerability(g0,at0)
efAt0<-findEfficiency(gAt0)
vulBefore<-c(vulBefore,findVulnerability(g0,at0))
efBefore<-c(efBefore,findEfficiency(gAt0))
#atr<-findAttack(gr,k)
#gAtr<-graphAfterAttack(gr,atr)
#vulgr<-c(vulgr,findVulnerability(gr,atr))
#efgr<-c(efgr,findEfficiency(gAtr))
gAt<-gAt0
g<-g0
Vul<-Vul0
efAt<-efAt0
t<-0
Flag<-1
while(t<Linklimit){
t<-t+1
print(t)
at<-findAttack(g,k)
gAt<-graphAfterAttack(g,at)
combinations<-getCombinations(gAt)
benefit<-sapply(combinations,function(x){
n<-names(x)
gTmp<-g+edge(n[1],n[2])
at<-findAttack(gTmp,k)
Vul-findVulnerability(gTmp,at)
})
selectedCom<-combinations[[which(benefit==max(benefit))[1]]]
n<-names(selectedCom)
g<-g+edge(n[1],n[2])
at<-findAttack(g,k)
Vul<-findVulnerability(g,at)
gAt<-graphAfterAttack(g,at)
efAt<-findEfficiency(gAt)
}
##############
set.seed(123)
gr<-erdos.renyi.game(n=n0,p.or.m = ecount(g),type = "gnm")
V(gr)$name <-V(gr)
atr<-findAttack(gr,k)
gAtr<-graphAfterAttack(gr,atr)
vulgr<-c(vulgr,findVulnerability(gr,atr))
efgr<-c(efgr,findEfficiency(gAtr))
####################
vulAfter<-c(vulAfter,Vul)
efAfter<-c(efAfter,efAt)
linksAdded<-c(linksAdded,t)
print(k)
}
###################################plot result###########################
#
#
df<-cbind.data.frame(attackSeq,efAfter,efBefore,vulAfter,vulBefore,linksAdded,vulgr,efgr)
names(df)<-c("numberOfAttacks","efAfter","efBefore","vulAfter","vulBefore","linksAdded",
"vulgr","efgr")
vulPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = vulAfter, colour="After Add")) +
geom_line(aes(y = vulBefore, colour = "Before Add")) +
geom_line(aes(y = vulgr, colour = "Random graph same size as added")) +
ylab(label="Vulnerability to Attck") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("blue", "red","green"))+
scale_x_continuous(breaks=attackSeq)
efPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = efAfter, colour="After Add")) +
geom_line(aes(y = efBefore, colour = "Before Add")) +
geom_line(aes(y = efgr, colour = "Random graph same size as added"))+
ylab(label="Efficiency After Attack") +
xlab("Number of Attacks")+
scale_colour_manual(values=c("blue", "red","green"))+
scale_x_continuous(breaks=attackSeq)
linkNumPlot<-ggplot(df, aes(x = numberOfAttacks)) +
geom_line(aes(y = linksAdded)) +
ylab(label="Number of Links Added") +
xlab("Number of Attacks")+
scale_x_continuous(breaks=attackSeq)
st1<-paste0("graphs/",algorithm,"_",attackMethod,"_",lengthOption,"_",n0,"_AddedSize_fixedL.png")
png(st1)
print(grid.arrange(vulPlot, efPlot,linkNumPlot ,ncol=1, nrow =3))
dev.off()
benefit<-sapply(combinations,function(x){
n<-names(x)
gTmp<-g+edge(n[1],n[2])
at<-findAttack(gTmp,k)
gTmp2<-graphAfterAttack(gTmp,at)
findEfficiency(gTmp2)-efAt
})
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/MV_DA_fixL.R')
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/ME_BA_fixL.R')
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/ME_DA_fixL.R')
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/MV_BA_fixL.R')
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/MV_DA_fixL.R')
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/ME_BA_fixL.R')
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/ME_DA_fixL.R')
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/ME_DA_fixL.R')
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/ME_BA_fixL.R')
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/MV_DA_fixL.R')
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/MV_BA_fixL.R')
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/MV_BA_fixL.R')
vulPlot
df$vulAfter
benefit
sum(benefit)
combinations
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/MV_BA_fixL.R')
benefit
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/MV_BA_fixL.R')
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/CompareVulWithEff/test6.R')
plot(g0)
at0<-findAttack(g0,k)
plot(graphAfterAttackWith(g0,at0))
k
plot(graphAfterAttackWithout(g0,at0))
plot(g)
Plot(g,mark.shape = 1/2)
plot(g,mark.shape = 1/2)
plot(g,mark.shape = 1/3)
plot(g,mark.shape = 1/10)
plot(g,mark.shape = 1/10, alpha=0.1)
plot(g,mark.shape = 1/10, alpha=0.3)
plot(g,mark.shape = 1/10, xlim = c(-1, 1))
plot(g,mark.shape = 1/10, xlim = c(-10, 10))
plot(g,mark.shape = 1/10, xlim = c(-0.5, 0.5))
plot(g,mark.shape = 1/10, xlim = c(-0.1, 0.1))
plot(g,mark.shape = 1/10, xlim = c(-0.1, 0.1),size=5)
plot.igraph(g)
plot.igraph(g, size=5)
plot.igraph(g, sizes=5)
rgplot(g)
plot.igraph(g, vertex.size=5)
plot.igraph(g, vertex.size=7)
plot.igraph(g, vertex.size=7,vertex.label=NA)
plot.igraph(graphAfterAttackWithout(g,findAttack(g,10)), vertex.size=7,vertex.label=NA)
plot.igraph(graphAfterAttackWith(g,findAttack(g,10)), vertex.size=7,vertex.label=NA)
vcount(graphAfterAttackWith(g,findAttack(g,10)))
ecount(graphAfterAttackWith(g,findAttack(g,10)))
vcount(graphAfterAttackWithout(g,findAttack(g,10)))
ecount(graphAfterAttackWithout(g,findAttack(g,10)))
ecount(graphAfterAttackWithout(g0,findAttack(g0,10)))
ecount(graphAfterAttackWith(g0,findAttack(g0,10)))
vcount(graphAfterAttackWith(g0,findAttack(g0,10)))
plot.igraph(graphAfterAttackWith(g0,findAttack(g0,10)), vertex.size=7,vertex.label=NA)
plot.igraph(graphAfterAttackWith(g,findAttack(g,10)), vertex.size=7)
plot.igraph(graphAfterAttackWith(g0,findAttack(g0,10)), vertex.size=7)
plot.igraph(g0, vertex.size=7)
plot.igraph(graphAfterAttackWith(g0,findAttack(g0,10)), vertex.size=7)
plot.igraph(graphAfterAttackWith(g0,findAttack(g0,10)), vertex.size=7)
plot.igraph(graphAfterAttackWith(g,findAttack(g,10)), vertex.size=7)
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/CompareVulWithEff/test6.R')
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/CompareVulWithEff/test6.R')
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/CompareVulWithEff/test6.R')
print(grid.arrange(vulPlot, efPlot,linkNumPlot ,ncol=1, nrow =3))
source('C:/Users/marayati/Google Drive/Myself/Research/implementation/CompareVulWithEff/test6.R')
setwd("C:\Users\marayati\Google Drive\Myself\Research\implementation\CompareVulWithEff")
setwd(@"C:\Users\marayati\Google Drive\Myself\Research\implementation\CompareVulWithEff")
setwd(@"C:\\Users\marayati\\Google Drive\\Myself\Research\\implementation\\CompareVulWithEff")
setwd("C:\\Users\marayati\\Google Drive\\Myself\Research\\implementation\\CompareVulWithEff")
